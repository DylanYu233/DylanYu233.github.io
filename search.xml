<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>The Cherno CppSeries学习笔记</title>
      <link href="/2023/08/15/The%20Cherno%20CppSeries%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/08/15/The%20Cherno%20CppSeries%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这是学习油管大佬Cherno的Cpp教程的个人笔记，供参考</p><p>b站上有从YouTube上搬运过来的熟肉视频，链接：【【1】【Cherno C++】【中字】欢迎来到C++】 <a href="https://www.bilibili.com/video/BV1uy4y167h2/?share_source=copy_web&vd_source=4175708e3d0d482d0df075930a6bbbdf">https://www.bilibili.com/video/BV1uy4y167h2/?share_source=copy_web&amp;vd_source=4175708e3d0d482d0df075930a6bbbdf</a></p><h2 id="【P63】C-的计时"><a href="#【P63】C-的计时" class="headerlink" title="【P63】C++的计时"></a>【P63】C++的计时</h2><h3 id="1-使用chrono库"><a href="#1-使用chrono库" class="headerlink" title="1.使用chrono库"></a>1.使用chrono库</h3><p><strong>介绍：</strong>在C++11中，是标准模板库中与时间有关的头文件。该头文件中所有函数与类模板均定义在<code>std::chrono</code>命名空间中</p><p>计时的使用很重要。在逐渐开始集成更多复杂的特性时，如果想编写性能良好的代码，需要用到计时来看到差异。计时有两种选择，一种是用平台特定的API，另一种是利用chrono库计时，此处推荐后者</p><p>在使用上，一个比较好的方法是建立一个Timer类，在其构造函数里面记下开始时刻，在其析构函数里面记下结束时刻，并打印从构造到析构所用的时间。如此就可以用这样一个类来对一个作用域进行计时：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Timer</span> &#123;</span><br><span class="line">std::chrono::time_point&lt;std::chrono::steady_clock&gt; start, end;</span><br><span class="line">std::chrono::duration&lt;<span class="type">float</span>&gt; duration;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Timer</span>()</span><br><span class="line">&#123;</span><br><span class="line">start = std::chrono::high_resolution_clock::<span class="built_in">now</span>();      <span class="comment">//获取运行开始的时间</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Timer</span>()</span><br><span class="line">&#123;</span><br><span class="line">end = std::chrono::high_resolution_clock::<span class="built_in">now</span>();        <span class="comment">//获取运行结束的时间</span></span><br><span class="line">duration = end - start;            <span class="comment">//获取运行时间</span></span><br><span class="line"></span><br><span class="line"><span class="type">float</span> ms = duration.<span class="built_in">count</span>() * <span class="number">1000.0f</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Timer took &quot;</span> &lt;&lt; ms &lt;&lt; <span class="string">&quot;ms&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//也可利用duration_cast进行时间转换</span></span><br><span class="line"><span class="comment">//std::chrono::milliseconds ms = std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(duration);</span></span><br><span class="line"><span class="comment">//std::cout &lt;&lt; &quot;Timer took &quot; &lt;&lt; ms.count() &lt;&lt; &quot;ms&quot; &lt;&lt; std::endl;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Function</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Timer timer;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;hello world!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">Function</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-关于类模板std-chrono-time-point和duration-cast函数"><a href="#2-关于类模板std-chrono-time-point和duration-cast函数" class="headerlink" title="2.关于类模板std::chrono::time_point和duration_cast函数"></a>2.关于类模板std::chrono::time_point和duration_cast函数</h3><p><strong>时间点：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">Clock</span>, <span class="keyword">class</span> <span class="title class_">Duration</span> = <span class="keyword">typename</span> Clock::duration&gt; <span class="keyword">class</span> time_point;</span><br></pre></td></tr></table></figure><p>类模板 <code>std::chrono::time_point</code> 表示时间中的一个点。它被实现成如同存储一个 <code>Duration</code> 类型的自 <code>Clock</code> 的纪元起始开始的时间间隔的值</p><p><code>Clock</code> 必须满足<a href="https://www.apiref.com/cpp-zh/cpp/named_req/Clock.html"><em>时钟</em> <em>(Clock)</em> </a>的要求或为 std::chrono::local_t (C++20 起)</p><p>第一个模板参数Clock用来指定所要使用的时钟,在标准库中有三种时钟，分别为：</p><ul><li>system_clock：当前系统范围(即对各进程都一致)的一个实时的日历时钟(wallclock)</li><li>steady_clock：当前系统实现的一个维定时钟，该时钟的每个时间嘀嗒单位是均匀的(即长度相等)。</li><li>high_resolution_clock：当前系统实现的一个高分辨率时钟。</li></ul><p>第二个模板参数用来表示时间的计量单位(特化的std::chrono::duration&lt;&gt; )</p><p>时间点都有一个时间戳，即时间原点。chrono库中采用的是Unix的时间戳1970年1月1日 00:00。所以time_point也就是距离时间戳(epoch)的时间长度（duration）</p><hr><p><strong>duration_cast</strong></p><p>duration_cast()用于将时间间隔从一种表示方式转换为另一种表示方式（即在不同的时间单位之间进行转换）</p><p>使用案例如下：</p><p>小时转换为分钟&#x2F;秒&#x2F;毫秒&#x2F;微秒</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::chrono::hours h = std::chrono::<span class="built_in">hours</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">std::chrono::minutes m = std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::minutes&gt;(h);</span><br><span class="line"></span><br><span class="line">std::chrono::seconds s = std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::seconds&gt;(h);</span><br><span class="line"></span><br><span class="line">std::chrono::milliseconds ms = std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(h);</span><br><span class="line"></span><br><span class="line">std::chrono::microseconds μs = std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::microseconds&gt;(h);</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;1小时可转换为 \n&quot;</span></span><br><span class="line">&lt;&lt; m.<span class="built_in">count</span>() &lt;&lt; <span class="string">&quot;分钟 \n&quot;</span></span><br><span class="line">&lt;&lt; s.<span class="built_in">count</span>() &lt;&lt; <span class="string">&quot;秒 \n&quot;</span></span><br><span class="line">&lt;&lt; ms.<span class="built_in">count</span>() &lt;&lt; <span class="string">&quot;毫秒 \n&quot;</span></span><br><span class="line">&lt;&lt; μs.<span class="built_in">count</span>() &lt;&lt; <span class="string">&quot;微秒&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考网页：<a href="https://www.apiref.com/cpp-zh/cpp/header/chrono.html">标准库头文件  - C++中文 - API参考文档 (apiref.com)</a></p><p>英文版：<a href="https://en.cppreference.com/w/cpp/chrono">Date and time utilities - cppreference.com</a></p><h2 id="【P72】-C-的预编译头文件-PCH"><a href="#【P72】-C-的预编译头文件-PCH" class="headerlink" title="【P72】 C++的预编译头文件(PCH)"></a>【P72】 C++的预编译头文件(PCH)</h2><p>预编译头文件（PCH）是一种用来加速编译过程的技术。一个项目中有多个C++文件并且每个文件又包含多个头文件，考虑到每次对C++文件进行修改，整个文件都需要重新编译，所以通常会使用预编译头文件来避免头文件的重复预处理。</p><h3 id="1-原理"><a href="#1-原理" class="headerlink" title="1.原理"></a>1.原理</h3><p>它可以先将一些经常被用到的头文件进行预处理且只进行一次，然后生成一个二进制文件。在编译其他源文件时，便可以直接引用这个二进制文件，而不需要再次解析和处理这些头文件，避免了重复的预处理过程，从而提高了编译速度</p><h3 id="2-使用限制"><a href="#2-使用限制" class="headerlink" title="2.使用限制"></a>2.使用限制</h3><p>预编译头文件中的内容最好都是不需要反复修改更新的东西，每修改一次，预编译头文件都要重新编译一次，会导致编译速度降低。像C++标准库、windows的API这种不会大改的文件可以放到预编译头文件中，可以节省编译时间</p><h3 id="3-缺点"><a href="#3-缺点" class="headerlink" title="3.缺点"></a>3.缺点</h3><p>预编译头文件的使用会隐藏掉这个cpp文件的依赖。比如在一个cpp文件中<code>#include &lt;vector&gt;</code>，就清楚地知道这个cpp文件中需要vector的依赖，而如果放到预编译头文件中，就会将该信息隐藏</p><h3 id="4-实现"><a href="#4-实现" class="headerlink" title="4.实现"></a>4.实现</h3><p>创建预编译头文件：开发者需要先创建一个预编译头文件，该文件通常包含项目中的常用头文件。这个预编译头文件可以是一个单独的文件，也可以是一个包含多个头文件的文件</p><p>例子如下：</p><p>pch.h文件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// C++ structures</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;utility&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Data structures</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// windows API</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>pch.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;pch.h&quot;</span></span></span><br></pre></td></tr></table></figure><p>Main.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;hello world&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>右键打开pch.cpp文件的属性页并如图进行修改</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/ChernoC++/p72%E9%A2%84%E5%A4%84%E7%90%86%E5%A4%B4%E6%96%87%E4%BB%B6/%E9%A2%84%E5%A4%84%E7%90%86%E5%A4%B4%E6%96%87%E4%BB%B61.jpg"></p><p>打开项目的属性页并如图进行修改</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/ChernoC++/p72%E9%A2%84%E5%A4%84%E7%90%86%E5%A4%B4%E6%96%87%E4%BB%B6/%E9%A2%84%E5%A4%84%E7%90%86%E5%A4%B4%E6%96%87%E4%BB%B62.jpg"></p><p>然后右键项目选择生成</p><p>对比：</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/ChernoC++/p72%E9%A2%84%E5%A4%84%E7%90%86%E5%A4%B4%E6%96%87%E4%BB%B6/%E6%9C%AA%E9%A2%84%E5%A4%84%E7%90%86%E5%89%8D%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%94%9F%E6%88%90.jpg" alt="未预处理时第一次生成：2051ms"></p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/ChernoC++/p72%E9%A2%84%E5%A4%84%E7%90%86%E5%A4%B4%E6%96%87%E4%BB%B6/%E6%9C%AA%E9%A2%84%E5%A4%84%E7%90%86%E5%89%8D%E7%AC%AC%E4%BA%8C%E6%AC%A1%E7%94%9F%E6%88%90.jpg" alt="未预处理时第二次生成:1101ms"></p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/ChernoC++/p72%E9%A2%84%E5%A4%84%E7%90%86%E5%A4%B4%E6%96%87%E4%BB%B6/%E9%A2%84%E5%A4%84%E7%90%86%E5%90%8E%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%94%9F%E6%88%90.jpg" alt="预处理后第一次生成：1147ms"></p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/ChernoC++/p72%E9%A2%84%E5%A4%84%E7%90%86%E5%A4%B4%E6%96%87%E4%BB%B6/%E9%A2%84%E5%A4%84%E7%90%86%E5%90%8E%E7%AC%AC%E4%BA%8C%E6%AC%A1%E7%94%9F%E6%88%90.jpg" alt="预处理后第二次生成：371ms"></p><h2 id="【P73】C-的dynamic-cast"><a href="#【P73】C-的dynamic-cast" class="headerlink" title="【P73】C++的dynamic_cast"></a>【P73】C++的dynamic_cast</h2><p>1.dynamic_cast可以在继承体系里面向上、向下或者平级进行类型转换，常用于将基类的指针或引用安全地转换成派生类的指针或引用</p><p>2.<strong>使用时需要保证是多态，即基类里面含有虚函数</strong></p><p>3.由于dynamic_cast使用了RTTI（运行时类型识别），所以会对性能增加负担</p><p>4.如果一条dynamic_cast语句的转换目标是<strong>指针类型</strong>并且<strong>失败</strong>了，则<strong>结果为NULL</strong></p><hr><p>Tip：支持<strong>运行时类型识别(run-time type identification,RTTI)<strong>。dynamic_cast主要还是用于执行“安全的向下转型，至于“向上转型”（即派生类指针或引用类型转换为其基类类型），本身就是安全的，尽管可以使用dynamic_cast进行转换，但这是没必要的， 普通的转换已经可以达到目的，</strong>毕竟使用dynamic_cast是需要开销的</strong></p><p>适用情况：我们想使用基类对象的指针或引用执行某个派生类操作并且该操作不是虚函数。一般来说，只要有可能我们应该尽量使用虚函数，使用RTTI有潜在风险，程序员必须清楚知道转换的目标类型并且必须检查类型转换是否被成功执行</p><hr><p>代码案例</p><p>注：使用dynamic_cast就必须在编译器中启动RTTI，即“运行时期类型识别”。默认情况下编译器是不启动RTTI的。凡是程序中用到了RTTI（比如typeid）都要在编译器中打开RTTI，这样才能正确编译</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Player</span> : <span class="keyword">public</span> Entity</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Enemy</span> : <span class="keyword">public</span> Entity</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Player* player = <span class="keyword">new</span> <span class="built_in">Player</span>();</span><br><span class="line">Entity* entity = <span class="keyword">new</span> <span class="built_in">Entity</span>();</span><br><span class="line">Entity* p1 = <span class="keyword">new</span> <span class="built_in">Player</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//旧式转换</span></span><br><span class="line">Entity* playerToEntity1 = player;                <span class="comment">//从下往上，隐式，安全</span></span><br><span class="line">Player* entityToPlayer1 = (Player*)entity;       <span class="comment">//从上往下，显式，危险</span></span><br><span class="line">Enemy* playerToEnemy1 = (Enemy*)player;          <span class="comment">//平级转换，显示，危险</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//当Enemy有的函数，Player也有的话，运行该函数它可能没有问题</span></span><br><span class="line"><span class="comment">//若访问特定的成员，只有Player有，而Enemy没有，程序则可能崩溃或出现意想不到的情况</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//dynamic_cast</span></span><br><span class="line">Entity* playerToEntity2 = <span class="built_in">dynamic_cast</span>&lt;Entity*&gt;(player);    <span class="comment">//从下往上，安全</span></span><br><span class="line">Player* entityToPlayer2 = <span class="built_in">dynamic_cast</span>&lt;Player*&gt;(entity);    <span class="comment">//从上往下，返回NULL</span></span><br><span class="line"><span class="keyword">if</span> (entityToPlayer2) &#123; std::cout &lt;&lt; <span class="string">&quot;转换成功&quot;</span> &lt;&lt; std::endl; &#125;    <span class="comment">//判断是否转换成功</span></span><br><span class="line"></span><br><span class="line">Enemy* playerToEnemy2 = <span class="built_in">dynamic_cast</span>&lt;Enemy*&gt;(player);     <span class="comment">//平级转换，返回NULL</span></span><br><span class="line">Player* p2 = <span class="built_in">dynamic_cast</span>&lt;Player*&gt;(p1);                   <span class="comment">//虽然是从上往下，但是实际对象是player，所以成功转换</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="【P74】C-的基准测试"><a href="#【P74】C-的基准测试" class="headerlink" title="【P74】C++的基准测试"></a>【P74】C++的基准测试</h2><p>写一个计时器对代码测试性能。<strong>在release模式</strong>下去测试，这样更有实际意义 </p><p>该部分内容同P63涉及的知识点一致，所以这里直接上代码案例</p><p>代码案例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Timer</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">Timer</span>()</span><br><span class="line">&#123;</span><br><span class="line">startTimePoint = std::chrono::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Timer</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Stop</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Stop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> endTimePoint = std::chrono::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> start = std::chrono::<span class="built_in">time_point_cast</span>&lt;std::chrono::microseconds&gt;(startTimePoint).<span class="built_in">time_since_epoch</span>().<span class="built_in">count</span>();</span><br><span class="line"><span class="keyword">auto</span> end = std::chrono::<span class="built_in">time_point_cast</span>&lt;std::chrono::microseconds&gt;(endTimePoint).<span class="built_in">time_since_epoch</span>().<span class="built_in">count</span>();</span><br><span class="line"><span class="comment">//time_point_cast可以将 std::chrono::time_point 进行精度转换</span></span><br><span class="line"><span class="comment">//time_since_epoch() 用于获取当前时间点距离时间戳(1970年1月1日00:00)的时间长度，返回值类型为duration</span></span><br><span class="line"><span class="comment">//转换到正确的时间，然后计数（count）</span></span><br><span class="line"><span class="comment">//返回值类型(start和end的类型)为long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> duration = end - start;</span><br><span class="line"><span class="type">double</span> ms = duration * <span class="number">0.001</span>;    <span class="comment">//转换为毫秒数</span></span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Timer took &quot;</span> &lt;&lt; duration &lt;&lt; <span class="string">&quot;μs(&quot;</span> &lt;&lt; ms &lt;&lt; <span class="string">&quot;ms)&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::chrono::time_point&lt;std::chrono::high_resolution_clock&gt; startTimePoint;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//测试shared_ptr和unique_ptr的性能对比</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Vector2</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">float</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//shared_ptr第一种情况</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Make Shared\n&quot;</span>;</span><br><span class="line">&#123;</span><br><span class="line">std::array&lt;std::shared_ptr&lt;Vector2&gt;, <span class="number">1000</span>&gt; sharedPtrs;</span><br><span class="line">Timer timer;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; sharedPtrs.<span class="built_in">size</span>(); i++)</span><br><span class="line">sharedPtrs[i] = std::<span class="built_in">make_shared</span>&lt;Vector2&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//shared_ptr第二种情况</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;New Shared\n&quot;</span>;</span><br><span class="line">&#123;</span><br><span class="line">std::array&lt;std::shared_ptr&lt;Vector2&gt;, <span class="number">1000</span>&gt; sharedPtrs;</span><br><span class="line">Timer timer;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; sharedPtrs.<span class="built_in">size</span>(); i++)</span><br><span class="line">sharedPtrs[i] = std::<span class="built_in">shared_ptr</span>&lt;Vector2&gt;(<span class="keyword">new</span> <span class="built_in">Vector2</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//unique_ptr</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Make Unique\n&quot;</span>;</span><br><span class="line">&#123;</span><br><span class="line">std::array&lt;std::unique_ptr&lt;Vector2&gt;, <span class="number">1000</span>&gt; uniquePtrs;</span><br><span class="line">Timer timer;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; uniquePtrs.<span class="built_in">size</span>(); i++)</span><br><span class="line">uniquePtrs[i] = std::<span class="built_in">make_unique</span>&lt;Vector2&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__debugbreak();       <span class="comment">//设置断点（这是属于VS的一个设置断点函数）</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="【P75】C-的结构化绑定"><a href="#【P75】C-的结构化绑定" class="headerlink" title="【P75】C++的结构化绑定"></a>【P75】C++的结构化绑定</h2><p>结构化绑定structured binding是C++17的新特性，能让我们更好地处理多返回值。可以在将函数返回为tuple、pair、struct等结构体且赋值给另外的变量的时候，<strong>直接得到成员</strong>，而不是结构体</p><p>在P52有涉及到如何处理多返回值，当时是用结构体去处理，而这个结构化绑定就是在这个的基础上拓展的一种新方法，特别是处理元组（tuple），对组（pair）以及返回诸如此类的结构体</p><p>注：确保在项目属性-C&#x2F;C++-语言-C++语言标准里面选择<strong>C++17或者C++20</strong></p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/ChernoC++/%E5%9B%BE%E7%89%87%E8%AF%B4%E6%98%8E/P74C++%E7%9A%84%E7%BB%93%E6%9E%84%E5%8C%96%E7%BB%91%E5%AE%9A.jpg" alt="选择C++17或者C++20"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;tuple&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可换成pair或者struct结构</span></span><br><span class="line"><span class="function">std::tuple&lt;std::string, <span class="type">int</span>&gt; <span class="title">CreatePerson</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> &#123; <span class="string">&quot;Dylan&quot;</span>, <span class="number">20</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> [name, age] = <span class="built_in">CreatePerson</span>();</span><br><span class="line">std::cout &lt;&lt; name &lt;&lt; <span class="string">&#x27;:&#x27;</span> &lt;&lt; age &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="【P76】如何处理OPTIONAL数据"><a href="#【P76】如何处理OPTIONAL数据" class="headerlink" title="【P76】如何处理OPTIONAL数据"></a>【P76】如何处理OPTIONAL数据</h2><p>在读取文件内容的时候，往往需要判断读取是否成功，常用的方法是传入一个引用变量或者判断返回的<code>std::string</code>是否为空，<strong>C++17</strong>在 STL 中引入了一个更好的方法：<strong>std::optional</strong>，它用来管理一个可选的容纳值（一个可能存在也可能不存在的数据）</p><p>注：确保在项目属性-C&#x2F;C++-语言-C++语言标准里面选择<strong>C++17或者C++20</strong></p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/ChernoC++/%E5%9B%BE%E7%89%87%E8%AF%B4%E6%98%8E/P74C++%E7%9A%84%E7%BB%93%E6%9E%84%E5%8C%96%E7%BB%91%E5%AE%9A.jpg" alt="选择C++17或者C++20"></p><h3 id="1-std-optional"><a href="#1-std-optional" class="headerlink" title="1.std::optional"></a>1.std::optional</h3><p><code>std::optional</code>是一种“<strong>和类型(sum type)<strong>”，也就是说，<code>std::optional</code>类型的变量要么是一个<code>T</code>类型的</strong>变量</strong>，要么是一个表示“什么都没有”的状态</p><h3 id="2-has-value"><a href="#2-has-value" class="headerlink" title="2.has_value()"></a>2.has_value()</h3><p>我们可以通过has_value()来判断对应的optional对像是否处于已经设置值的状态，如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(data.<span class="built_in">has_value</span>()) &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="3-访问optional对象中的数据"><a href="#3-访问optional对象中的数据" class="headerlink" title="3.访问optional对象中的数据"></a>3.访问optional对象中的数据</h3><p>我们可以通过value(), value_or()来获取optional对象中存储的值, **value_or()**可以允许传入一个默认值, 如果optional对象为std::nullopt（无值状态）, 则直接返回传入的默认值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;optional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line">std::optional&lt;std::string&gt;<span class="built_in">ReadFileAsString</span>(<span class="type">const</span> std::string&amp; filepath)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">std::ifstream <span class="title">stream</span><span class="params">(filepath)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (stream) &#123;</span><br><span class="line"></span><br><span class="line">std::string result;</span><br><span class="line"><span class="comment">//read file</span></span><br><span class="line"><span class="built_in">getline</span>(stream, result);   <span class="comment">//读取文件中的一行数据</span></span><br><span class="line">stream.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//如果文本存在的话，它会返回所有文本的字符串。如果不存在或者不能读取，则返回optional&#123;&#125;</span></span><br><span class="line"><span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::optional&lt;std::string&gt; data = <span class="built_in">ReadFileAsString</span>(<span class="string">&quot;data.txt&quot;</span>);</span><br><span class="line"><span class="comment">// 访问optional对象中的数据还有其他方法</span></span><br><span class="line"><span class="comment">// 1.std::string str = *data;</span></span><br><span class="line"><span class="comment">// 2.std::string value = data.value();</span></span><br><span class="line">std::string value = data.<span class="built_in">value_or</span>(<span class="string">&quot;Not present&quot;</span>);     <span class="comment">//数据若不存在则返回默认值&quot;Not Present&quot;</span></span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; value &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (data) &#123;     <span class="comment">//这里这样写是没问题的，可以不用has_value()，显得更简洁美观</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;File is read successfully&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;File could not be opened&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="【P77】单一变量存放多种类型的数据"><a href="#【P77】单一变量存放多种类型的数据" class="headerlink" title="【P77】单一变量存放多种类型的数据"></a>【P77】单一变量存放多种类型的数据</h2><p>类模板 <code>std::variant</code> 表示一个类型安全的<a href="https://www.apiref.com/cpp-zh/cpp/language/union.html">联合体</a>，是<strong>C++17</strong>的新特性，是一种可以容纳多种类型变量的结构体</p><h3 id="1-std-variant"><a href="#1-std-variant" class="headerlink" title="1.std::variant"></a>1.std::variant</h3><p>和optional很像，它的作用是让我们不用担心处理确切的数据类型，且只有一个变量，所以我们需要做的就是定义一个variant对象，然后列出它所有可能的数据类型。</p><p>比如在解析一个文件时，我们可能不确定读取的数据是一个字符串还是整数，又或者是在程序运行时接受一个命令行参数，而我们不确定该参数是什么数据类型，这时<code>std::variant</code>允许我们列出所有可能的数据类型，然后再由我们决定是什么数据类型</p><h3 id="2-与union的区别"><a href="#2-与union的区别" class="headerlink" title="2.与union的区别"></a>2.与union的区别</h3><p>技术上讲，union更有效率，而<strong>variant</strong>更加<strong>类型安全</strong>，不会造成未定义行为，所以在可以自由使用更多内存的情况下，应当去使用它,除非做的是底层优化，非常需要性能</p><h3 id="3-std-variant的运用"><a href="#3-std-variant的运用" class="headerlink" title="3.std::variant的运用"></a>3.std::variant的运用</h3><p><strong>1）简单运用</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;variant&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::variant&lt;std::string, <span class="type">int</span>&gt; data; <span class="comment">//列举出可能的类型</span></span><br><span class="line"></span><br><span class="line">data = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="comment">// 索引的第一种方式：std::get，但是要与上一次赋值类型相同，不然会报错</span></span><br><span class="line">std::cout &lt;&lt; std::<span class="built_in">get</span>&lt;std::string&gt;(data) &lt;&lt; std::endl;   <span class="comment">//print hello world</span></span><br><span class="line"></span><br><span class="line">data = <span class="number">20</span>;</span><br><span class="line">std::cout &lt;&lt; std::<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;(data) &lt;&lt; std::endl;           <span class="comment">//print 20</span></span><br><span class="line">std::cout &lt;&lt; std::<span class="built_in">get</span>&lt;std::string&gt;(data) &lt;&lt; std::endl;   <span class="comment">//编译通过，但是runtime会报错，显示std::bad_variant_access</span></span><br><span class="line"></span><br><span class="line">data = <span class="literal">false</span>;      <span class="comment">//能编译通过，但不能正常访问</span></span><br><span class="line">std::cout &lt;&lt; std::<span class="built_in">get</span>&lt;<span class="type">bool</span>&gt;(data) &lt;&lt; std::endl;    <span class="comment">//编译失败</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2）index()索引</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//std::variant的index函数</span></span><br><span class="line">std::variant&lt;std::string, <span class="type">int</span>&gt; data;</span><br><span class="line">data.<span class="built_in">index</span>();  <span class="comment">// 返回一个整数(data当前存储的数据的类型在&lt;&gt;里的序号)，比如返回0代表存的是string, 返回1代表存的是int</span></span><br></pre></td></tr></table></figure><p><strong>3）get_if()</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;variant&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::variant&lt;std::string, <span class="type">int</span>&gt; data;</span><br><span class="line"></span><br><span class="line">data = <span class="string">&quot;Dylan&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; std::<span class="built_in">get</span>&lt;std::string&gt;(data) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">auto</span> value = std::<span class="built_in">get_if</span>&lt;std::string&gt;(&amp;data)) &#123;   <span class="comment">//传入内存地址或指针，返回指针</span></span><br><span class="line"><span class="comment">//此处便可以像平常一样对数据进行处理</span></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//数据处理</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data = <span class="number">2</span>;</span><br><span class="line">std::cout &lt;&lt; std::<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;(data) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4）std::variant和std::optional</strong></p><p><code>std::optional</code>能允许我们有一些不存在的数据，但当我们需要知道程序哪里出现问题，而不仅仅只是知道数据不存在的时候，我们便选择<code>std::variant</code>，例子如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果我们成功获取数据，则用字符串作为值，否则设置一些错误编码，以此作为返回值</span></span><br><span class="line"><span class="keyword">enum class</span> <span class="title class_">ErrorCode</span> &#123;</span><br><span class="line">None = <span class="number">0</span>,         <span class="comment">//代表空数据</span></span><br><span class="line">NotFound = <span class="number">1</span>,     <span class="comment">//代表无法查到</span></span><br><span class="line">NoAccess = <span class="number">2</span>      <span class="comment">//代表数据受保护</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::variant&lt;std::string, ErrorCode&gt;<span class="built_in">ReadFileAsString</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这样处理便可以让我们知道哪里出问题和出现什么问题，并进行处理</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在硇洲岛捡到寄居蟹</title>
      <link href="/2023/07/23/%E6%B5%B7%E8%9E%BA%E5%A3%B3%E4%B8%AD%E7%9A%84%E5%B1%85%E6%B0%91/"/>
      <url>/2023/07/23/%E6%B5%B7%E8%9E%BA%E5%A3%B3%E4%B8%AD%E7%9A%84%E5%B1%85%E6%B0%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>7.22晚，我跟马骝借了民宿里的头灯便向海边走去。这是我第一次赶海，兴致勃勃的我跟早就到海边抓螃蟹的小孩一起行动，找到了几个螺壳，其中有四个是有寄居蟹的。带回民宿后，我问阿用哥该如何将它们取出来，他说等第二天它们因缺水死后，尾部的钩子勾不住壳，就能慢慢地拉出来了，他还告诉我将它们放淡水里能加速它们的死亡。然后我把它们带到四楼的洗手池里，并在洗手池里放了些自来水。</p><p>将它们放好并清洗完其余的壳后我便回房间里，百度查了一下寄居蟹，想简单地了解一下它们，发现它们是非常脆弱的，在脱水的情况下，只能存活几个小时，最多存活一天，找不到壳裸奔会被太阳晒死，换壳的时候如果失败会死，有的时候寄居蟹们还会在换壳的时候排起长队，大寄居蟹换大壳，换下来的小壳给后面的寄居蟹，它们的一生似乎都在奔波于换壳中，为了活下去而努力着。</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E5%AF%84%E5%B1%85%E8%9F%B9/%E5%AD%98%E6%B4%BB%E4%B8%8B%E6%9D%A5%E7%9A%84%E5%AF%84%E5%B1%85%E8%9F%B9.jpg" alt="存活下来的寄居蟹"></p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E5%AF%84%E5%B1%85%E8%9F%B9/%E5%AF%84%E5%B1%85%E8%9F%B9.jpg"></p><p>第二天早上我起来去看它们的情况，令我惊讶的是四个里居然有一个还活着，不知道它是如何做到的。它还能时不时把身体探出来察看周围情况，可能在寻找一线生机，但也比较虚弱了，我不得不敬佩这个寄居蟹的顽强，所以我决定把它带到海边放生，希望它能活下去吧。<br>生命是脆弱的，但因为活下去的本能可以表现得很顽强。无论怎么样，生命总能找到出路。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 在湛江的日子里 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>茂名三宫山之行</title>
      <link href="/2023/07/14/%E8%8C%82%E5%90%8D%E4%B8%89%E5%AE%AB%E5%B1%B1/"/>
      <url>/2023/07/14/%E8%8C%82%E5%90%8D%E4%B8%89%E5%AE%AB%E5%B1%B1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>7月11日下午，我在教我小学四年级的表妹，再又一次被气得歇斯底里时，突然一条微信信息弹出，打开手机一看，原来是许久未见过面的雷叔邀请我当晚去通宵爬三宫山。我为了逃离教表妹这一折磨的任务，想都没多想当即答应下来。</p><p>吃饭的时候，我用手机查了一下三宫山，发现它是一座未开发的野山，，拥有1250米高的海拔，且山上是没有任何防护措施的。雷叔在车上的时候跟我们说他之前在早上爬过一次，这座山算是比较险的。</p><p>看来又是一次未知的冒险。</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E8%8C%82%E5%90%8D%E4%B8%89%E5%AE%AB%E5%B1%B1/%E4%B8%8E%E9%9B%B7%E5%8F%94%E7%9A%84%E6%B6%88%E6%81%AF%E8%AE%B0%E5%BD%95.jpg" alt="我与雷叔当时的部分消息记录"></p><p>我们在来的路上买了一些饮料和食物，防止在爬山过程中没有足够的能量补充，毕竟第一次通宵爬山，还是准备充分点好。</p><p>大概十一点多的时候才来到山脚下，然后我们就要开车开到山上的一个停车场，由于我们的司机是新手，且通往停车场的山路多是昏暗的崎岖小道，这个过程可谓是惊险十足，可能稍有不慎就跌落山底。</p><p>停车场这里时不时会吹起大风卷起一片沙尘，但这里的视野是比较好的，我们抬头便能看到点点星光。当时来的人并不多，有经验的雷叔给我们找来了之前别人留下给后来人的登山杖，我们待到约莫凌晨十二点多的时候便拿上装备开始爬山。</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E8%8C%82%E5%90%8D%E4%B8%89%E5%AE%AB%E5%B1%B1/%E5%81%9C%E8%BD%A6%E5%9C%BA%E4%B8%8A%E7%A9%BA%E7%9A%84%E6%98%9F%E6%98%9F.jpg" alt="停车场上空的星星"></p><p>在走一段充满乱石的山路时有一段小插曲，裤哥边用手机聊天边走路，被我们吐槽，结果没走多久就掉下一个不是很高的小坑，引得我们哄堂大笑。在这段山路上我们还遇到了2队人，一队有差不多十人左右，且都是跟我们年纪相仿的，还有一队是两位比我们大一轮的茂名大叔，我印象最深刻的就是这两个大叔，他们在爬山的全程中似乎是有用不完的热情。在走到差不多四分之一时（这里之后就没有山路了，要用登山杖爬这些几乎呈45°角的山坡），我们就看到有人在山坡上打灯，然后我们就向灯的方向大呼，并加快爬坡速度。越往上，由于不再有树的遮挡，山风也畅通无阻。</p><p>在爬上山顶的过程，有2段比较强的风带，站在上面人都有点站不稳，没有登山杖的话想通过是比较艰难的。路上我们还陆续遇到了两三拨人，我们一起在一个背风坡上坐下来抱团取暖，而有的人则继续前进，比如那两位很有活力的大叔。</p><p>约莫4点左右，我们才继续上山，大概4点半左右上到山顶。由于太早了，我们只好退到离山顶不远处的坡上休息等待，那里有很多巨石块，能够挡住风，裤哥直接就躺在一个石头下面睡觉，整个人蜷缩成一团。</p><p>(未完待续…)</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我眼中的遂溪</title>
      <link href="/2023/07/10/%E6%88%91%E7%9C%BC%E4%B8%AD%E7%9A%84%E9%81%82%E6%BA%AA/"/>
      <url>/2023/07/10/%E6%88%91%E7%9C%BC%E4%B8%AD%E7%9A%84%E9%81%82%E6%BA%AA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>遂溪，我的家乡，醒狮之乡。这座小县城的节奏很慢，存在感也很低，给人的感觉就是非常安静，哪怕是在疫情时期，在这里也彷佛感受不到疫情的严峻，它就静静地在这里，与世无争，很多人走出去，很少人进来，也很少人回来，虽然不是像《桃花源记》中的世外桃源般与世隔绝，但也有几分悠然。</p><p>在很早以前，还没有任何生活压力的我满遂溪跑，只为了和好友找个安全质量又好的网吧上网，那几年下来我没见过遂溪有任何变化，甚至可以说，18年以前的遂溪和我刚出生的时候的遂溪是几乎没什么两样的，比如修路，从我记事起这座县城就在修路，一直修一直烂，无论哪条路都是坑坑洼洼的,可以说是遂溪特有的一道风景线了。我曾经以为遂溪是万年不变的，天天和朋友开玩笑，吐槽遂溪永远发展不起来，就是一个适合养老摆烂的地方。到了高二结束正式进入高三，开启了两点一线的生活后，我便很少游荡了，只有在考完一次大考或者节假日放假，没有晚修的晚上才会选择出来扫个共享电车（最喜欢青桔），漫无目的地乱逛。</p><p><img src="https://cdn.jsdelivr.net/gh/DylanYu233/PicGodemo/img/%E9%81%82%E6%BA%AA%20(12).jpg" alt="高三上学期的某天晚上，对面的那栋楼是当时学校还在建的教学楼，如今已投入使用"></p><p>不知道是不是因为长期两点一线的生活让我的弦一直绷得很紧，在学校里没有心思去想一些有的没的，以至于我每次出去乱逛，我的思绪就会像脱缰的野马一般奔腾起来，感知也变得敏锐起来。在逛的过程中，我能感觉到遂溪的很多地方似乎跟我记忆中的遂溪不一样了，少了很多东西，但也多了一些东西，但当时并没有过多留意。</p><p><img src="https://cdn.jsdelivr.net/gh/DylanYu233/PicGodemo/img/%E9%81%82%E6%BA%AA%20(8).jpg" alt="高三的某个傍晚"></p><p><img src="https://cdn.jsdelivr.net/gh/DylanYu233/PicGodemo/img/%E9%81%82%E6%BA%AA%20(9).jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/DylanYu233/PicGodemo/img/%E9%81%82%E6%BA%AA%20(11).jpg" alt="又要威又要戴头盔的国肥"></p><p>上了大学后，我开始留意和关注遂溪的变化,每次回来就像是见一个久久未见的故人一般。我感觉2018年似乎是遂溪的一个时间节点，在那之后比如儿时最喜欢去的百姓超市，有着两三代人回忆的茶楼酒家皇家、银塔等酒店由于疫情都倒闭了，如今这些建筑还在，就像时代的残影一般，彷佛在提醒着我曾经的时光一去不复返了，但也有许多东西出现并代替了它们的位置，遂溪在那之后有了全丰这样的商业广场，也出现了新的茶楼酒家代替了皇家、银塔的位置，还有了孔圣山，不仅如此许许多多的房地产也进驻遂溪，在今年还开通了便于遂溪和湛江之间往返的遂溪大道。</p><p><img src="https://cdn.jsdelivr.net/gh/DylanYu233/PicGodemo/img/%E9%81%82%E6%BA%AA%20(6).jpg" alt="曾经的二中"></p><p><img src="https://cdn.jsdelivr.net/gh/DylanYu233/PicGodemo/img/%E9%81%82%E6%BA%AA%20(5).jpg" alt="当时还未开通的遂溪大道"></p><p><img src="https://cdn.jsdelivr.net/gh/DylanYu233/PicGodemo/img/%E9%81%82%E6%BA%AA%20(3).jpg" alt="孔圣山一角"></p><p>前两天和好友兜风的时候，路过旧中心市场遗址，那里原先的建筑已经被推掉了，不仅如此还用施工时才用的蓝色铁皮板围了起来，不知道将来会建出什么，但样例图里呈现出来的样子看起来似乎挺不错的，这里暂且留个悬念吧。兜风的时候我还注意到，一直受遂溪本地佬诟病的道路也终于修成了沥青路（上次回来很多地方还在疯狂修路，这个暑假回来我就发现了很多地方都铺成了沥青路），诸如此类的变化还在继续着。每次回来，看到家乡这些变化的时候就像拆礼物时一样，总是有新的东西，也总会有所期待。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 在湛江的日子里 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Hexo搭建博客</title>
      <link href="/2023/05/30/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2023/05/30/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="常用工具推荐"><a href="#常用工具推荐" class="headerlink" title="常用工具推荐"></a>常用工具推荐</h3><p>markdown编辑器：Typora</p><p>代码编辑器：notepad++、VScode等</p><h3 id="Git下载安装及环境配置"><a href="#Git下载安装及环境配置" class="headerlink" title="Git下载安装及环境配置"></a>Git下载安装及环境配置</h3><p>进入Git官网下载页面(<a href="https://git-scm.com/download/">https://git-scm.com/download/</a>) 下载最新版的Git项目版本管理工具Windows64位版本安装程序，我下载的版本是 <code>Git-2.41.0-64-bit.exe</code></p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/1.png"></p><p>下载完后双击安装包开始安装，安装设置用默认的就好，一直选Next，最后点Install开始安装。接下来让我们测试一下是否安装成功，首先通过快捷键win+R打开Windows运行命令框，然后输入cmd打开命令行程序，在黑框中输入命令git version或git -v后回车</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/2.jpg"></p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/3.jpg" alt="回车后如图显示就证明安装成功了"></p><h3 id="Node-js下载安装及环境配置"><a href="#Node-js下载安装及环境配置" class="headerlink" title="Node.js下载安装及环境配置"></a>Node.js下载安装及环境配置</h3><p>进入Node.js官网下载页面(<a href="https://nodejs.org/en">Node.js (nodejs.org)</a>) ,下载完成后，双击安装包，开始安装Node.js.安装设置还是用默认的，一直选Next，最后点Install开始安装。安装完后打开cmd窗口测试是否安装成功</p><p> 输入:  node -v   &#x2F;&#x2F; 显示node.js版本</p><p>​npm -v   &#x2F;&#x2F; 显示npm版本</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/4.jpg"></p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/5.jpg"></p><h3 id="Hexo的下载以及博客的生成"><a href="#Hexo的下载以及博客的生成" class="headerlink" title="Hexo的下载以及博客的生成"></a>Hexo的下载以及博客的生成</h3><p>然后在cmd窗口下输入命令下载hexo</p><p> npm install hexo-cli -g</p><p>安装完后输入命令hexo -v来测试是否安装成功</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/6.jpg"></p><p>然后可以通过输入命令mkdir blog创建名为blog的文件（文件名可自定义，此处以blog为例）</p><p>以我的文档创建为例，此时文件会创建在目录C:\Users\86189下（users即是用户），后面所有博客的东西都会放进这里面来</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/7.jpg"></p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/8.jpg"></p><p>然后在cmd窗口中输入命令 cd blog，然后回车，此时我们就位于名为blog的文件目录下</p><p>输入命令 hexo init，然后回车，就可以在这个blog文件下生成博客的基本框架</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/9.jpg" alt="生成成功后可以在cmd窗口中可看到该提示"></p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/10.jpg" alt="生成成功后可以在blog文件目录下看到这些文件"></p><p>输入命令hexo s 在本地启动博客</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/11.jpg"></p><p>然后复制 <a href="http://localhost:4000/">http://localhost:4000/</a> 去浏览器进行预览</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/12.jpg" alt="这个便是博客初始页面"></p><h3 id="将博客部署到GitHub"><a href="#将博客部署到GitHub" class="headerlink" title="将博客部署到GitHub"></a>将博客部署到GitHub</h3><h4 id=""><a href="#" class="headerlink" title=""></a></h4><p>注册一个github账户，注册成功后，点击右上角的+按钮，选择New repository，创建一个&lt;用户名&gt;.github.io的仓库</p><p>仓库的格式必须为：&lt;用户名&gt;.github.io</p><p>Description：描述仓库（选填）</p><p>勾选 Initialize this repository with a README 初始化一个 README.md 文件</p><p>点击 Create repository 进行创建</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/13.jpg"></p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/14.jpg"></p><p>输入命令在blog文件目录下安装一个git部署插件</p><p>npm install –save hexo-deployer-git</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/15.jpg"></p><h4 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h4><p>点击电脑右下角，然后找到Git，打开Git Bash配置用户名和邮箱</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/16.jpg"></p><p>然后在git bash命令窗口分别输入</p><p>git config –global user.name “你的用户名”</p><p>git config –global user.email “你的邮箱”</p><p>可通过命令git config -l检查是否配置成功</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/17.jpg"></p><h4 id="连接GitHub"><a href="#连接GitHub" class="headerlink" title="连接GitHub"></a>连接GitHub</h4><p>生成ssh公钥，执行以下指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;你的邮箱&quot;</span></span><br></pre></td></tr></table></figure><p>然后一直回车直到出现下图所示</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/18.jpg" alt="结果如图"></p><p>之后打开C盘下用户文件夹下的.ssh的文件夹，会看到 id_rsa.pub</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/19.jpg"></p><p>然后用记事本打开公钥的内容（也就是文件id_rsa.pub）并全部复制</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/20.jpg"></p><h4 id="将SSH-KEY配置到Github"><a href="#将SSH-KEY配置到Github" class="headerlink" title="将SSH KEY配置到Github"></a>将SSH KEY配置到Github</h4><p>进入github，点击右上角头像，选择settings</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/21.jpg"></p><p>进入设置页面后选择SSH and GPG keys</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/22.jpg" alt="选择New SSH key"></p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/23.jpg"></p><h4 id="测试连接，输入以下命令"><a href="#测试连接，输入以下命令" class="headerlink" title="测试连接，输入以下命令"></a>测试连接，输入以下命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/24.jpg" alt="出现红框内容便说明大功告成"></p><h4 id="修改-config-yml文件"><a href="#修改-config-yml文件" class="headerlink" title="修改_config.yml文件"></a>修改_config.yml文件</h4><p>先到GitHub仓库中复制SSH</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/25.jpg"></p><p>然后在代码编辑器中打开blog文件夹，在_config.yml中如图修改设置，设置成功后记得保存</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/26.jpg" alt="_config.yml的初始代码"></p><p>修改deploy设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&#x27;git&#x27;</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:username/username.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/27.jpg" alt="修改后"></p><p>_config.yml就是整个Hexo框架的配置文件了。可以在里面修改大部分的配置。详细可参考官方的配置描述</p><p>最后在cmd窗口的blog文件位置下输入命令hexo d，将博客上传到github仓库</p><p>hexo常用命令如下：</p><p>hexo clean  &#x2F;&#x2F;清除缓存</p><p>hexo g         &#x2F;&#x2F;生成静态文件</p><p>hexo d        &#x2F;&#x2F;部署网站</p><p>hexo s        &#x2F;&#x2F;启动服务器</p><p>上传成功后，便可在浏览器中输入 username.github.io访问自己的博客</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>我使用的博客主题是Butterfly，该主题算是比较热门的，推荐使用。此处附上主题的使用教程网址：<a href="https://butterfly.js.org/">https://butterfly.js.org/</a></p><p>关于博客主题的设置可参考视频教程：</p><p>【使用Hexo搭建个人博客手摸手教学(7)|主题安装使用】 <a href="https://www.bilibili.com/video/BV1d64y1q7KS/?share_source=copy_web&vd_source=4175708e3d0d482d0df075930a6bbbdf">https://www.bilibili.com/video/BV1d64y1q7KS/?share_source=copy_web&amp;vd_source=4175708e3d0d482d0df075930a6bbbdf</a></p><p>有疑问或者想互相交流可添加QQ联系本人：1135337589</p>]]></content>
      
      
      
        <tags>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
