<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Ps初使用以及对摄影后期的一些想法</title>
      <link href="/2023/09/18/%E5%88%9D%E7%94%A8ps/"/>
      <url>/2023/09/18/%E5%88%9D%E7%94%A8ps/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在抖音偶然刷到一个摄影视频，最后出来的成片偏赛博朋克风，效果很戳我，我很想保存下来。作者把图片放在评论区，但保存不了，只能靠手机截图，截图下来后，欣喜的我拿给我身边的朋友们看，他们第一眼都以为是AI合成的，可能因为具有赛博朋克风的动漫感。但我越看越觉得截图下来的效果不合我意(嫌弃压画质)，后面用去水印软件和找朋友帮忙都扒不出来我想要的效果</p><p>于是对这张图心心念念的我便在第二天在抖音私聊作者，求这张照片的原图</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/ps%E5%88%9D%E4%BD%BF%E7%94%A8/1.jpg"></p><p>但他在发给我的原图上打上了文字水印，而且还是在人像上，白色的字在黑色的衣服上特别扎眼，更要命的是这种文字是无法通过去水印软件搞掉的，不过雷叔告诉我可以用Ps去掉，所以我便决定试试</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/ps%E5%88%9D%E4%BD%BF%E7%94%A8/%E4%BF%AE%E5%89%8D.jpg" alt="这是修改前"></p><p>说起PS这款软件，我是早有耳闻的，之前一直没想过有一天会使用上它，因为当时的我对摄影还没有那么大的兴趣，而且平常生活中的拍照也用不上这么专业的软件，觉得也许这辈子都用不上，但现在看来结论还是下太早了，毕竟未来谁说的准呢</p><p>随着不断地旅行，不知不觉地便喜欢上了拍照，再是摄影，而在一开始我接触到摄影时，我便发现这门学问是离不开后期处理的，而且很多摄影大佬也会对拍摄的照片进行后期处理来达到摄影师想要呈现出来的感觉，这也是雷叔在一开始就告诉过我的，可以说他算是我的摄影启蒙人吧，对此我很感激</p><p>其实早在几天前就把雷叔推荐的破解版Ps的安装压缩包下在我的电脑里了（之前用的是Lr），但因为本人的严重拖延症，一直没有解压安装。直到今天对这张照片强烈的渴望才促使我一放学就回去安装下载，安装完成后我便在B站找了两三个关于用Ps去除文字的视频，捣鼓了约莫2个小时才弄满意。但不得不说在功能上，Ps是比Lr多得多的，但许多人在摄影的后期处理上两者都有推荐，如果Ps可以替代Lr的话，为什么市场上还需要Lr呢？我想可能是具体的用途不同吧，这还有待我去摸索研究</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/ps%E5%88%9D%E4%BD%BF%E7%94%A8/%E4%BF%AE%E5%90%8E.png" alt="这是修改后"></p><p>总的来说，这次使用Ps修图后的照片效果还是很不错的。看着我捣鼓了两小时的成果心里的成就感也油然而生，我想，随着对摄影后期的学习，我会爱上使用它的</p><p>此处分享几张近期拍的照片，前面的几张人像是我在做志愿活动的那天（9月14号）下午，碰巧撞见索尼来我们学校举办的相机试用活动时拍的，用的相机是我抢我朋友的，他刚好把相机带来，只能说我运气挺好哈哈</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/ps%E5%88%9D%E4%BD%BF%E7%94%A8/%E4%BA%BA%E5%83%8F1.jpg"></p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/ps%E5%88%9D%E4%BD%BF%E7%94%A8/%E4%BA%BA%E5%83%8F2.jpg"></p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/ps%E5%88%9D%E4%BD%BF%E7%94%A8/%E4%BA%BA%E5%83%8F3.jpg"></p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/ps%E5%88%9D%E4%BD%BF%E7%94%A8/%E4%BA%BA%E5%83%8F4.jpg"></p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/ps%E5%88%9D%E4%BD%BF%E7%94%A8/%E4%B8%87%E8%B1%A1%E6%B1%87.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Ps </tag>
            
            <tag> 我的小打小闹 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回溯算法</title>
      <link href="/2023/09/07/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
      <url>/2023/09/07/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="回溯算法"><a href="#回溯算法" class="headerlink" title="回溯算法"></a>回溯算法</h2><ul><li><p><strong>介绍：</strong>回溯算法的核心是<strong>递归函数</strong>，它是一种<strong>暴力穷举</strong>的算法，并不是一种高效算法。如果我们想想对回溯算法进行一下优化，可以在其基础上加一些<strong>剪枝</strong>的操作，但不能改变它穷举的本质。虽然它不高效，但一些题只能通过穷举所有的可能，并从中选出想要的结果</p></li><li><p><strong>能解决的问题类型：</strong></p><ol><li>组合问题：N个数里面按一定规则找出k个数的集合</li><li>切割问题：一个字符串按一定规则有几种切割方式</li><li>子集问题：一个N个数的集合里有多少符合条件的子集</li><li>排列问题：N个数按一定规则全排列，有几种排列方式</li><li>棋盘问题：N皇后，解数独等等</li></ol></li><li><p><strong>将回溯问题抽象成一棵树</strong></p><p>能用回溯法解决的问题都可以抽象为树形结构（无一例外），因为这些问题的本质都是在给定的集合中通过递归获取我们需要的结果，其中<strong>集合的大小构成树的宽度，而递归的深度便构成树的深度</strong>，而<strong>递归函数要有终止条件</strong>，所以抽象出来的树必定是一颗<strong>高度有限</strong>的树。所以我们在平常解决这些问题的时候，为了方便理解，可以在草稿纸上将这棵树画出来</p></li><li><p><strong>回溯算法模板</strong></p><p>回溯三部曲：</p><ol><li><p>确定递归函数返回值以及参数</p><p>回溯算法的函数返回值一般为void，需要的参数有时候不容易定下来，所以一般是先写逻辑再确定需要的参数</p></li><li><p>确定搜索的遍历过程</p><p>回溯算法一般是在集合中递归搜索，集合的大小构成树的宽度，递归的深度构成树的深度，如图所示：</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/1.jpg" alt="此图以leetcode的77题:组合为例"></p><p>遍历过程的伪代码形式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for (选择：本层集合中元素) &#123;</span><br><span class="line">处理节点;</span><br><span class="line">backtracking(路径，选择列表);</span><br><span class="line">回溯，撤销处理结果;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>核心就是 <strong>for 循环里面的递归，在递归调用之前「做选择」，在递归调用之后「撤销选择」</strong>，其中<strong>for循环控制横向遍历，backtracking（递归函数）控制纵向遍历</strong>，如此便能把一棵树的节点全遍历完</p></li><li><p>确定终止条件</p><p>如上图所示，一般来说，当纵向遍历到叶子结点时，就代表着找到了满足条件的一个结果，将这个结果存起来并结束本层递归</p><p>终止条件伪代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (终止条件) &#123;</span><br><span class="line">存放结果;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><p>通过上面的分析我们可以得到回溯算法模板框架：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">void backtracking(参数)</span><br><span class="line">&#123;</span><br><span class="line">if (终止条件) &#123;</span><br><span class="line">存放结果;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for (选择：本层集合中元素) &#123;</span><br><span class="line">处理节点;</span><br><span class="line">backtracking(路径，选择列表);</span><br><span class="line">回溯，撤销处理结果;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><p>回溯算法的时间复杂度取决于结果集的大小，即满足条件的组合的个数，这里有一个通用公式：路径长度×搜索树的叶子数</p><p>现在我们便通过用该模板来解决一道问题来加深理解</p><p>leetcode题目链接：<a href="https://leetcode.cn/problems/combinations/description/">77. 组合 - 力扣（LeetCode）</a></p><p>我的代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combine</span>(<span class="type">int</span> n, <span class="type">int</span> k) &#123;</span><br><span class="line">        std::vector&lt;<span class="type">int</span>&gt; path;      <span class="comment">// 存放k个元素</span></span><br><span class="line">        std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; result;    <span class="comment">// 存放结果集 </span></span><br><span class="line">        <span class="comment">//回溯经典模板</span></span><br><span class="line">        std::function&lt;<span class="type">void</span>(<span class="type">int</span>)&gt; dfs = [&amp;](<span class="type">int</span> i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k == path.<span class="built_in">size</span>()) &#123;              <span class="comment">//递归退出条件，即到达决策树底层</span></span><br><span class="line">                result.<span class="built_in">emplace_back</span>(path);       <span class="comment">//将每个符合要求的组合存入result中</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (; i &lt;= n; i++) &#123;         <span class="comment">//for循环控制横向遍历，选择：本层集合中元素</span></span><br><span class="line">                path.<span class="built_in">emplace_back</span>(i);     <span class="comment">//将当前元素放入</span></span><br><span class="line">                <span class="built_in">dfs</span>(i + <span class="number">1</span>);               <span class="comment">//递归控制纵向遍历</span></span><br><span class="line">                path.<span class="built_in">pop_back</span>();          <span class="comment">//回溯，撤销处理结果</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">1</span>);      <span class="comment">//开始递归</span></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(K⋅C(n,k))</p><p>空间复杂度：O(K)</p><h2 id="剪枝"><a href="#剪枝" class="headerlink" title="剪枝"></a>剪枝</h2><p>回溯算法虽是暴力搜索，但它是可以根据一些隐藏条件进行小优化的。以上面的那道题为例，当n &#x3D; 4，k &#x3D; 3时，在第一层for循环的元素3之后（包括3）的遍历便没有必要了，换句话说也就是第一层for循环最多只能到2。而第一层节点为1时，第二层for循环的元素4也没有必要遍历到，如图：</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/2.jpg" alt="此图以n=4，k=4时为例"></p><p>所以我们可以将这些没必要遍历的枝干剪掉来优化算法，而我们的优化其实就是针对<strong>for循环里的范围</strong>进行思考。以上题为例，我们可以通过逐步思考以下两个问题来进行缩小范围</p><blockquote><ol><li><p>每次选取后还需选取多少元素？                                          <code> k - path.size();</code></p></li><li><p>还需要选取的元素个数最多能从哪里进行纵向搜索？       <code> n - (k - path.size()) + 1;</code></p></li></ol><p>为什么有个+1呢？因为要包括起始位置</p></blockquote><p>上题剪枝后的代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combine</span>(<span class="type">int</span> n, <span class="type">int</span> k) &#123;</span><br><span class="line">        std::vector&lt;<span class="type">int</span>&gt; path;</span><br><span class="line">        std::vector&lt;std::vector&lt;<span class="type">int</span>&gt;&gt; result;</span><br><span class="line"></span><br><span class="line">        std::function&lt;<span class="type">void</span>(<span class="type">int</span>)&gt; dfs = [&amp;](<span class="type">int</span> i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k == path.<span class="built_in">size</span>()) &#123;</span><br><span class="line">                result.<span class="built_in">emplace_back</span>(path);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (; i &lt;= n - (k - path.<span class="built_in">size</span>()) + <span class="number">1</span>; i++) &#123;</span><br><span class="line">                path.<span class="built_in">emplace_back</span>(i);</span><br><span class="line">                <span class="built_in">dfs</span>(i + <span class="number">1</span>);</span><br><span class="line">                path.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Unity学习笔记</title>
      <link href="/2023/09/03/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/09/03/Unity%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="【P1】Unity的下载安装"><a href="#【P1】Unity的下载安装" class="headerlink" title="【P1】Unity的下载安装"></a>【P1】Unity的下载安装</h2><p><strong>介绍：</strong>Unity是一套具有完善体系与编辑器的跨平台游戏开发工具，也可称之为游戏引擎。游戏引擎是指一些编写好的可重复利用的代码与开发游戏所用的各功能编辑器。Unity目前已超过50%的游戏引擎市场占有率</p><p>Unity中文官网：<a href="https://unity.cn/">Unity实时内容开发平台 -实时3D引擎、2D、VR&amp;AR可视化数据 | Unity中国官网</a></p><p><strong>下载安装Unity：</strong></p><p>为以后方便管理编译器版本以及模块和扩展，先下载Unity Hub，下载前要先注册然后登入</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/Unity/%E5%AE%89%E8%A3%85/1.jpg"></p><p>安装完后打开Unity Hub，然后登入，登入是跳转到网站上登入的</p><p>登入后会出现如下图的页面，先不安装，选择Skip Installation，然后选择同意获得个人版本许可（Agree and get personal edition license）</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/Unity/%E5%AE%89%E8%A3%85/2.jpg"></p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/Unity/%E5%AE%89%E8%A3%85/3.jpg"></p><p>选择右上角的齿轮可设置语言</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/Unity/%E5%AE%89%E8%A3%85/4.jpg"></p><p>设置完语言后点击许可证然后点击添加</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/Unity/%E5%AE%89%E8%A3%85/5.jpg" alt="选择获取免费的个人版许可证"></p><p>然后在左侧安装项安装编辑器，选择LTS的推荐版本</p><blockquote><p>在添加模块上，如果电脑上已经有下载到VS，可以不选择安装开发工具（若没有VS则选择安装），平台可不选（可后期添加），选择添加文档，语言选择简体中文</p></blockquote><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/Unity/%E5%AE%89%E8%A3%85/6.jpg"></p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/Unity/%E5%AE%89%E8%A3%85/7.jpg"></p><p>安装完后，我们以后便都可以在项目那栏管理和创建项目</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/Unity/%E5%AE%89%E8%A3%85/8.jpg"></p><p>其中最上面正中间可选择对应的编辑器版本</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/Unity/%E5%AE%89%E8%A3%85/9.jpg"></p><h2 id="【P2】Unity-界面详解"><a href="#【P2】Unity-界面详解" class="headerlink" title="【P2】Unity 界面详解"></a>【P2】Unity 界面详解</h2><h3 id="Unity的5大面板"><a href="#Unity的5大面板" class="headerlink" title="Unity的5大面板"></a>Unity的5大面板</h3><blockquote><p>Hierachy：层级面板，游戏场景中的资源，比如UI、模型</p><p>Scene：场景面板，用于管理游戏场景中的各种游戏物体</p><p>Game：游戏场景面板，实际的玩家视角</p><p>Project：项目面板，用于管理项目中的所有资源</p><p>Inspector：检查面板，可以理解为属性窗口，查看 Hierachy 或 Project 中资源的属性</p></blockquote><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/Unity/%E6%AD%A3%E5%BC%8F%E5%86%85%E5%AE%B9/6.jpg"></p><h3 id="Unity-内置简易模型和材质"><a href="#Unity-内置简易模型和材质" class="headerlink" title="Unity 内置简易模型和材质"></a>Unity 内置简易模型和材质</h3><p><strong>模型介绍：</strong></p><p>模型是一种美术资源，3D游戏中，场景、角色、武器等立体的元素一般都是模型。学习阶段我们可以使用Unity内置的简易模型来学习引擎操作</p><p>添加模型步骤：在层级面板中，右键点击 –&gt; 3DObject –&gt; 各种模型</p><p><strong>材质介绍：</strong></p><p>模型本身是由“顶点组成的网格数据”，本身并不存在颜色。</p><p>材质决定了模型的实际外观，由于我们使用的是Unity内置模型，和模型一样，材质也是一种资源</p><h3 id="Scene-界面游戏物体操作"><a href="#Scene-界面游戏物体操作" class="headerlink" title="Scene 界面游戏物体操作"></a>Scene 界面游戏物体操作</h3><p><strong>工具栏：</strong></p><p>手性工具，快捷键Q，用来拖动场景；</p><p>移动工具，快捷键W，用来移动模型位置；</p><p>旋转工具，快捷键E，用来旋转模型；</p><p>缩放工具，快捷键R，用来放大缩小模型；</p><p>移动&amp;缩放工具，快捷键Y，可以同时移动、旋转模型。</p><p>以上都是在改变游戏物体的Transform组件中的各项数值</p><blockquote><p>Tip：按住右键，可以通过按W A S D键在Scene中进行视角移动，就像打FPS游戏一样</p></blockquote><h2 id="【P3】Unity中的世界坐标系和本地坐标系"><a href="#【P3】Unity中的世界坐标系和本地坐标系" class="headerlink" title="【P3】Unity中的世界坐标系和本地坐标系"></a>【P3】Unity中的世界坐标系和本地坐标系</h2><p>在Unity的场景中有一个固定的坐标系，每个物体都会有一个相对这个坐标系的位置，这个坐标系被叫做<strong>世界坐标系</strong>。每个在Unity中新建的模型对象，它的<strong>Transform位置参数</strong>所采用的就是世界坐标系，而（0，0，0）便是世界坐标系的原点</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/Unity/%E6%AD%A3%E5%BC%8F%E5%86%85%E5%AE%B9/1.jpg"></p><p>除了世界坐标系，每一个在Unity 3D世界中的物体还有一个属于自己的坐标系——<strong>本地坐标系</strong>（也被称为局部坐标系），而这个坐标系的原点就是这个物体的中心点，我们可以通过控制这个坐标系来对物体进行移动操作。当一个物体对象被包含在另一个物体对象时，它们之间的关系便会成为父子关系</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/Unity/%E6%AD%A3%E5%BC%8F%E5%86%85%E5%AE%B9/2.png" alt="如图所示"></p><p>此时子物体的<strong>Transform位置参数</strong>采用的便是父物体的本地坐标系，也就是说，它的位置是相对于父物体而言，所以当移动父物体时，子物体会跟着父物体移动，并且它的<strong>Transform位置参数</strong>不变，只有父物体的位置参数发生变化</p><blockquote><p>Tip：父子模型中，父子组合的坐标轴中心将会被重新设置，坐标轴会显示在这个组合的中心，此时我们可以在场景窗口的左上方找到第一个按钮，然后设置为轴心，则父物体的中心点便恒是父子组合的本地坐标系中心，此时坐标轴出现在父物体里面</p></blockquote><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/Unity/%E6%AD%A3%E5%BC%8F%E5%86%85%E5%AE%B9/3.jpg"></p><h2 id="【P4】组件脚本"><a href="#【P4】组件脚本" class="headerlink" title="【P4】组件脚本"></a>【P4】组件脚本</h2><h3 id="组件的基本介绍"><a href="#组件的基本介绍" class="headerlink" title="组件的基本介绍"></a>组件的基本介绍</h3><p>在Unity中，游戏物体实际上是不具备任何功能的，若想为其添加功能，则需要为它添加相关的功能组件。在Unity的<strong>“检查器”</strong>面板中，我们可以看到物体拥有的组件，使用的组件可以是<strong>引擎内部的组件脚本</strong>或是<strong>自己编写的组件脚本</strong>。也就是说，一个游戏物体往往具有多个组件，而每个组件又是一个组件脚本，我们通常会使用<strong>C#语言</strong>来编写组件脚本</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/Unity/%E6%AD%A3%E5%BC%8F%E5%86%85%E5%AE%B9/4.jpg" alt="这是一个立方体的检查器面板"></p><p>如图，我们可以通过检查器面板看到创建的一个立方体已经包含了<strong>Transform(转换)<strong>组件、</strong>Mesh Filter</strong>组件、<strong>Mesh Renderer</strong>组件和**Box Collider(盒状碰撞器)**组件等，这里简单介绍这四个重要的组件</p><blockquote><p>Transform: 描述一个物体在3D世界中的位置、旋转和缩放信息，它是每一个游戏物体都具有的组件，也是不能被删掉的必备组件</p><p>Mesh Filter: 规定了该物体使用哪种网格显示</p><p>Mesh Renderer: 包含了该物体与渲染相关的属性</p><p>Box Collider: 设定了该物体在物理世界中的碰撞样式及大小</p></blockquote><p>添加组件的方法很简单，选择需要添加的游戏物体，然后单击“检查器”面板下方的“添加组件”按钮，在弹出的组件菜单中选择需要添加的组件，也可以通过输入组件名称来搜索组件，这种方法个人觉得挺方便的。不仅如此，在任意组件的右上角还能看到<strong>“更多”</strong>按钮（也就是3个竖直排列的·），单击该按钮便会弹出该组件的其他操作，如调整该组件在控制面板中的位置、移除组件和复制组件等，具体的功能用法不再一一赘述</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/Unity/%E6%AD%A3%E5%BC%8F%E5%86%85%E5%AE%B9/5.jpg" alt="这是一个立方体的检查器面板"></p><h3 id="脚本的基本介绍"><a href="#脚本的基本介绍" class="headerlink" title="脚本的基本介绍"></a>脚本的基本介绍</h3><p>组件脚本创建很简单，只需在<strong>“项目”</strong>面板中右键执行<strong>“创建&gt;C#脚本”</strong>便可创建一个脚本，双击该脚本文件便能打开编辑器，看到该脚本的代码。在该脚本中</p>]]></content>
      
      
      
        <tags>
            
            <tag> Unity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Cherno OpenGL学习笔记</title>
      <link href="/2023/08/23/The-Cherno-OpenGL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/08/23/The-Cherno-OpenGL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这是学习油管大佬Cherno的OpenGL教程的个人笔记，供参考</p><p>b站上有从YouTube上搬运过来的熟肉视频，链接：【【译】TheCherno-OpenGL系列教程】 <a href="https://www.bilibili.com/video/BV1Ni4y1o7Au/?share_source=copy_web&vd_source=4175708e3d0d482d0df075930a6bbbdf">https://www.bilibili.com/video/BV1Ni4y1o7Au/?share_source=copy_web&amp;vd_source=4175708e3d0d482d0df075930a6bbbdf</a></p><p>LearnOpenGL教程文档：</p><blockquote><p>英文版：<a href="https://learnopengl.com/">https://learnopengl.com/</a></p><p>中文版：<a href="https://learnopengl-cn.github.io/">https://learnopengl-cn.github.io/</a></p></blockquote><h2 id="【P1】欢迎来到OpenGL"><a href="#【P1】欢迎来到OpenGL" class="headerlink" title="【P1】欢迎来到OpenGL"></a>【P1】欢迎来到OpenGL</h2><h3 id="什么是OpenGL"><a href="#什么是OpenGL" class="headerlink" title="什么是OpenGL"></a>什么是OpenGL</h3><p>首先如果你听过 OpenGL，但不确定它是什么，你可能想到与图形有关的，那就是 OpenGL。OpenGL 是一种图形接口，现在 API 代表应用程序接口，基本上就是一大堆我们能够调用的函数去做一些事情。在这种情况下，由于 OpenGL 是一种图形 API，它允许我们做一些与图形相关的事情，特别的是它允许我们访问 GPU 也就是显卡，图形处理单元（Graphics Processing Unit）</p><p>调用显卡也更好地绘制图形，所以实际上为了利用电脑或其他设备（比如手机）中强大的图形处理器，需要调用一些 API 访问固件。OpenGL 正好是允许访问和操作 GPU 的许多接口中的一种，当然我们也有一些其他的接口，比如 Direct3D、Vulcan 和 Metal 等等，所以某种角度来说 OpenGL 允许我们控制显卡</p><h3 id="关于OpenGL误解"><a href="#关于OpenGL误解" class="headerlink" title="关于OpenGL误解"></a>关于OpenGL误解</h3><p>让我们来澄清一些人关于 OpenGL 的误解</p><p>首先，许多人称它为一个类库或一种引擎或一些其他的框架，但这些都不是。OpenGL 核心本身只是一种规范，和 CPP 规范差不多。实际上它没有确定任何代码和类似的事情本身就是规范，比如“嘿，这个函数应该存在，需要这些参数并且返回这个值”，它只是一种你能利用这种 API 做什么规范，没有任何具体的实现，这意味它绝不是一个类库，因为 OpenGL 本身没有代码，它只是一种规范。</p><p>去哪儿下载 OpenGL 是另一个常见的问题</p><p>然而，答案是你不需要真的去下载 OpenGL，它本身只是一种规范。那么，谁去实现它呢，谁去为你调用的 OpenGL 函数写代码呢？这个答案是 GPU 制造商，所以如果你使用的是 NVIDIA 显卡，那么你的显卡驱动（也就是 NVIDIA 驱动）实际上包含了 OpenGL 的实现，每个显卡制造商比如 AMD、Intel 等都会有它们自己的实现，每家关于 OpenGL 的实现都会有些不同，这也就是有些游戏能在 NVIDIA 驱动的显卡上运行但在一个 AMD 电视或者其他显卡设备上运行有些区别、甚至会出现问题的原因</p><p>但不管怎么说，关键在于你的显卡制造商实现的 OpenGL，这又可能导致下一个有关 OpenGL 常见的误解：它是开源的。我不知道人们为什么会这么觉得，也许是名字中带着“Open”，但是它根本不是开源的，你看不到 OpenGL 的源码，因为首先它是由 GPU 制造商实现的，它们肯定不会发布它们的驱动源码</p><p>OpenGL 提供了什么能激发和导致许多人不幸地说 OpenGL 是无与伦比的？原因在于它是跨平台的，所以你的 OpenGL 代码可以在 Windows、Mac、Linux 和 Android 上正常执行，以至于人们立马就会意识到 OpenGL 比 Direct3D 更优越，因为它能在所有平台上运行，但是请不要这么说</p><p>从我 EA 技术中心并处理过许多引擎中图形接口的经验来看，因为 OpenGL 是跨平台的 API，而制作一款游戏不会只涉及实现一个独立的图形 API。如果游戏引擎是跨平台的，那意味着它不仅实现了 Xbox，也包括其他一些平台，它们不得不实现大量其他的图形接口</p><p>因此，我们面临的问题是图形 API 是为特定平台设计的。例如 Direct3D 是微软为 Windows 设计的，它在 Windows 上的表现要比跨平台的 API 好些。现在请记住，实际编写这些代码的人不是微软，即使微软的确为了更好的代码质量和 GPU 制造商合作过。所以关于 API 的比较是没有任何意义的，因为通常平台原生的东西会更健壮更友好</p><p>就 OpenGL 的复杂性而言，它可以说是现在可以学习的最简单的 API 了，所以 OpenGL 是绝对值得学习的。Vulkan 是另一个跨平台的 API，但它更底层更严谨，不适合初学者直接入门，老实说我并不想使用 Vulkan 去开发游戏，OpenGL 更加稳定</p><h3 id="传统与现代OpenGL"><a href="#传统与现代OpenGL" class="headerlink" title="传统与现代OpenGL"></a>传统与现代OpenGL</h3><p>另外本系列学习的主要是现代 OpenGL。OpenGL 于 90 年代发布，那时的情况和现在大不相同，那时的 GPU 是可编程的，十分灵活，制造商给了程序员和开发者更多的控制权</p><p>传统 OpenGL 和现代 OpenGL 之间最大的区别就是着色器。如果你对图形学感兴趣的话可能听说过着色器，它可能有点像 shadow 这个单词或者是光源，有些人将它和光源或其他比较。抛开这些，着色器是程序，它是在你 GPU 上运行的代码，这就是着色器，它是在你 GPU 上运行的一段程序</p><p>那么如果你用 C++、Java 或 C# 或不管什么语言写代码，这段代码都会运行在你的 CPU 上。但当我们开始处理图形的大部分时间里，我们想要更为精确的控制显卡运行，可能要将大部分代码从 CPU 转到 GPU 上，因为它在 GPU 上运行更快，这就是着色器存在的意义：允许我们在 GPU 上运行代码。所以可编程的着色器是最大的区别</p><h2 id="【P2】设置OpenGL和在C-中创建一个窗口"><a href="#【P2】设置OpenGL和在C-中创建一个窗口" class="headerlink" title="【P2】设置OpenGL和在C++中创建一个窗口"></a>【P2】设置OpenGL和在C++中创建一个窗口</h2><p><strong>介绍：</strong>GLFW是一个轻量级类库，它能为我们做的事情就是创建一个窗口，创建一个OpenGL环境以及给我们访问一些像输入之类的基础东西，它能做的就这么多，不像SDL（Simple DirectMedia Layer）那样全面，SDL实际上就像是一个渲染器，可以画任何你想要的图形，并且能实现DirectX和OpenGL，所以它像是一个完整的框架。但在这里我们不需要任何东西，而是需要我们去写我们自己的东西。在这一节课要做的就是将第一步自动化：创建一个窗口并且不需要为每个平台编写不同的代码，换句话说就是这份代码将具有良好的可移植性，适配多种平台</p><h3 id="设置OpenGL"><a href="#设置OpenGL" class="headerlink" title="设置OpenGL"></a>设置OpenGL</h3><p>访问GLFW官网(<a href="https://www.glfw.org/">An OpenGL library | GLFW</a>)，这里我们选择 32 位的GLFW下载</p><blockquote><p>在这里有些人可能会问，对于Windows的这些二进制文件，是该下载32位的还是64位的呢?</p><p>这其实与实际的操作系统没有任何关系，而是和你的目标应用程序相关。如果你正在编译的应用程序是win32程序（x86），那么就要32位的二进制文件，当然你的操作系统却可能是win10 64位</p></blockquote><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/ChernoOpenGL/1.jpg"></p><p>将下载后的压缩文件解压</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/ChernoOpenGL/2.jpg"></p><p>然后在VS新建一个项目，在新建项目的文件目录下新建一个Dependencies文件夹，然后在该文件里面创建一个GLFW文件夹</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/ChernoOpenGL/3.jpg"></p><p>将解压的文件中的include文件夹和lib-vc文件夹复制粘贴到GLFW文件夹下</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/ChernoOpenGL/4.jpg"></p><p>在VS中的项目属性 - C&#x2F;C++ - 常规 - 附加包含目录 里添加GLFW的包含目录</p><blockquote><p>注意：右上角的<strong>配置项</strong>要选择<strong>所有配置</strong>，平台选择Win32</p></blockquote><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/ChernoOpenGL/5.jpg"></p><p>在VS中的项目属性 - 链接器 - 常规 - 附加库目录 里添加GLFW的链接目录</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/ChernoOpenGL/6.jpg"></p><p>然后将GLFW官网的文档下面的代码复制粘贴进VS里运行，代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;GLFW/glfw3.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    GLFWwindow* window;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Initialize the library */</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">glfwInit</span>())</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Create a windowed mode window and its OpenGL context */</span></span><br><span class="line">    window = <span class="built_in">glfwCreateWindow</span>(<span class="number">640</span>, <span class="number">480</span>, <span class="string">&quot;Hello World&quot;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (!window)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">glfwTerminate</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Make the window&#x27;s context current */</span></span><br><span class="line">    <span class="built_in">glfwMakeContextCurrent</span>(window);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Loop until the user closes the window */</span></span><br><span class="line">    <span class="keyword">while</span> (!<span class="built_in">glfwWindowShouldClose</span>(window))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/* Render here */</span></span><br><span class="line">        <span class="built_in">glClear</span>(GL_COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Swap front and back buffers */</span></span><br><span class="line">        <span class="built_in">glfwSwapBuffers</span>(window);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* Poll for and process events */</span></span><br><span class="line">        <span class="built_in">glfwPollEvents</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">glfwTerminate</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/ChernoOpenGL/8.jpg"></p><h3 id="画一个三角形"><a href="#画一个三角形" class="headerlink" title="画一个三角形"></a>画一个三角形</h3><p>在<code>glClear(GL_COLOR_BUFFER_BIT);</code>后面写上：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">glBegin</span>(GL_TRIANGLES);</span><br><span class="line"><span class="built_in">glVertex2f</span>(<span class="number">-0.5f</span>, <span class="number">-0.5f</span>);</span><br><span class="line"><span class="built_in">glVertex2f</span>( <span class="number">0.0f</span>,  <span class="number">0.5f</span>);</span><br><span class="line"><span class="built_in">glVertex2f</span>( <span class="number">0.5f</span>, <span class="number">-0.5f</span>);</span><br><span class="line"><span class="built_in">glEnd</span>();</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/ChernoOpenGL/9.jpg"></p><h2 id="【P3】在C-中使用现代OpenGL"><a href="#【P3】在C-中使用现代OpenGL" class="headerlink" title="【P3】在C++中使用现代OpenGL"></a>【P3】在C++中使用现代OpenGL</h2><p>现代OpenGL库的开发者通常是显卡的生产商。我们所购买的显卡所支持的OpenGL版本都是为这个系列的显卡专门开发的，也就是说OpenGL库里的函数都是在显卡驱动中被实现的，而我们所需要做的就是去访问我们的驱动，获取函数（即获取它们的声明，然后链接函数），并调用它们，所以我们需要做的就是<strong>访问驱动的动态链接库文件，然后检索库里面那些函数的函数指针</strong>。</p><p>基本上现代OpenGL有一大堆函数。但是有两个问题：</p><blockquote><ol><li>它不是跨平台的。访问显卡驱动并从中取出这些函数，我们需要使用一些Win32接口，然后加载函数指针等，但这些操作只适用于Windows系统</li><li>函数非常多，需要手动检索它们然后为它们写代码</li></ol></blockquote><p>所以我们实际上需要使用另一个库：GLEW，它能做的就是找到我们使用的显卡驱动，然后找到对应的dll文件，加载所有的函数指针，提供OpenGL接口规范，各种函数声明，符号声明和常量等。</p><p>GLEW库下载链接：<a href="http://glew.sourceforge.net/">http://glew.sourceforge.net/</a></p><p>下载后将解压出来的文件放入Dependences文件夹</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/ChernoOpenGL/10.jpg" alt="此处我将其改名为GLEW"></p><p>GLEW文档：<a href="file:///C:/Users/86189/Desktop/Yu/OpenGL/Dependencies/GLEW/doc/basic.html">GLEW: The OpenGL Extension Wrangler Library</a></p><p>查阅文档我们知道：</p><ol><li>不能从glew里面使用opengl函数，直到你调用了glewInit()</li><li>在调用glewInit()之前，需要创建一个有效的opengl渲染上下文（rendering context）</li></ol><blockquote><p>提醒：<br>如果你在使用一个新的库，先看文档</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>The Cherno CppSeries学习笔记</title>
      <link href="/2023/08/15/The%20Cherno%20CppSeries%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/08/15/The%20Cherno%20CppSeries%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这是学习油管大佬Cherno的Cpp教程的个人笔记，供参考</p><p>b站上有从YouTube上搬运过来的熟肉视频，链接：【【1】【Cherno C++】【中字】欢迎来到C++】 <a href="https://www.bilibili.com/video/BV1uy4y167h2/?share_source=copy_web&vd_source=4175708e3d0d482d0df075930a6bbbdf">https://www.bilibili.com/video/BV1uy4y167h2/?share_source=copy_web&amp;vd_source=4175708e3d0d482d0df075930a6bbbdf</a></p><p>C++参考文档：</p><blockquote><p>中文版：<a href="https://zh.cppreference.com/w/%E9%A6%96%E9%A1%B5">cppreference.com</a></p><p>英文版：<a href="https://en.cppreference.com/w/">cppreference.com</a></p></blockquote><h2 id="【P19】C-类与结构体对比"><a href="#【P19】C-类与结构体对比" class="headerlink" title="【P19】C++类与结构体对比"></a>【P19】C++类与结构体对比</h2><p>区别：</p><blockquote><p>作用上：class默认private，struct默认public。<br>使用上：引入struct是为了让C++向后兼容C。</p></blockquote><p>推荐选用：</p><blockquote><p>若只包含一些变量结构或POD(plain old data)时，选用struct。例如数学中的向量类。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">Vec2</span> &#123;</span><br><span class="line"><span class="type">float</span> x, y;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Add</span><span class="params">(<span class="type">const</span> Vec2&amp; other)</span> </span>&#123;</span><br><span class="line">x += other.x;</span><br><span class="line">y += other.y;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>若要实现很多功能的类，则选用class</p><h2 id="【P24】C-枚举"><a href="#【P24】C-枚举" class="headerlink" title="【P24】C++枚举"></a>【P24】C++枚举</h2><p><strong>枚举量的声明</strong></p><ul><li><p>enum是enumeration的缩写。基本上它就是一个数值集合。不管怎么说，这里面的<strong>数值只能是整数。</strong></p></li><li><p>定义枚举类型的主要目的：<strong>增加程序的可读性</strong></p></li><li><p>枚举变的名字一般以<strong>大写字母</strong>开头（非必需）</p></li><li><p>默认情况下，编译器设置第一个 枚举变量值为 0，下一个为 1，以此类推（也可以手动给每个枚举量赋值），且<strong>未被初始化的枚举值的值默认将比其前面的枚举值大1。</strong>）</p></li><li><p>枚举量的值可以相同</p></li><li><p>枚举类型所使用的底层类型默认为int类型，也可指定其他底层类型 ，如 unsigned char，char</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">example</span> : <span class="type">unsigned</span> <span class="type">char</span> <span class="comment">//将类型指定成unsigned char，枚举变量变成了8位整型，减少内存使用</span></span><br><span class="line">&#123;</span><br><span class="line"> A, B = <span class="number">10</span>, C</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对于枚举，<strong>只定义了赋值运算符，没有为枚举定义算术运算</strong> ，但<strong>能参与其他类型变量的运算</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A++;               <span class="comment">//非法！</span></span><br><span class="line">D = A + C          <span class="comment">//非法！</span></span><br><span class="line"><span class="type">int</span> sum = <span class="number">1</span> + A    <span class="comment">//Ok,编译器会自动把枚举量转换为int类型。</span></span><br></pre></td></tr></table></figure></li></ul><p>代码案例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Log</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Level</span></span><br><span class="line">&#123;</span><br><span class="line">LevelError = <span class="number">-1</span>, LevelWarning, LevelInfo</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">Level m_LogLevel = LevelInfo;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">setLevel</span><span class="params">(Level level)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_LogLevel = level;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Error</span><span class="params">(<span class="type">const</span> std::string&amp; message)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(m_LogLevel &gt;= LevelError)</span><br><span class="line">std::cout &lt;&lt;<span class="string">&quot;[Error]：&quot;</span> &lt;&lt; message &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Warning</span><span class="params">(<span class="type">const</span> std::string&amp; message)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(m_LogLevel &gt;= LevelWarning)</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;[Waring]：&quot;</span> &lt;&lt; message &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Info</span><span class="params">(<span class="type">const</span> std::string&amp; message)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(m_LogLevel &gt;= LevelInfo)</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;[Info]：&quot;</span> &lt;&lt; message &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Log log;</span><br><span class="line">log.<span class="built_in">setLevel</span>(Log::LevelError);</span><br><span class="line"></span><br><span class="line">log.<span class="built_in">Error</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">log.<span class="built_in">Warning</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">log.<span class="built_in">Info</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="【P25】C-构造函数"><a href="#【P25】C-构造函数" class="headerlink" title="【P25】C++构造函数"></a>【P25】C++构造函数</h2><ul><li>当创建对象的时候，构造函数被调用</li><li>构造函数一般是用来初始化类的对象</li></ul><blockquote><p>构造函数用来初始化类的对象，与父类的其它成员不同，它不能被子类继承（子类可以继承父类所有的成员变量和成员函数，但不继承父类的构造函数）。因此，在创建子类对象时，为了初始化从父类继承来的数据成员，系统需要调用其父类的构造函数。</p></blockquote><p>构造原则如下:</p><ol><li>如果子类没有定义构造方法，则调用父类的无参数的构造方法</li><li>如果子类定义了构造方法，不论是无参数还是带参数，在创建子类的对象的时候,首先调用父类无参数的构造方法，然后调用自己的构造方法</li><li>在创建子类对象时候，如果子类的构造函数没有显式调用父类的构造函数，则会自动调用父类的默认无参构造函数</li><li>在创建子类对象时候，如果子类的构造函数没有显示调用父类的构造函数且父类自己提供了无参构造函数，则会调用父类自己的无参构造函数</li><li>在创建子类对象时候，如果子类的构造函数没有显示调用父类的构造函数且父类只定义了自己的有参构造函数，则会出错（如果父类只有有参数的构造函数，则子类必须显示调用此带参构造函数）</li></ol><p>代码案例:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Entity</span>(<span class="type">const</span> std::string&amp; name)</span><br><span class="line">:<span class="built_in">m_name</span>(name)</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Entity construct&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::string m_name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Player</span> : <span class="keyword">public</span> Entity</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Player</span>(<span class="type">const</span> std::string&amp; name)</span><br><span class="line">:<span class="built_in">p_name</span>(name), Entity::<span class="built_in">Entity</span>(<span class="string">&quot;NULL&quot;</span>)      <span class="comment">//在成员初始化列表中显式调用父类有参构造函数</span></span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Player construct&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::string p_name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Entity* e = <span class="keyword">new</span> <span class="built_in">Entity</span>(<span class="string">&quot;NULL&quot;</span>);</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">Player* p = <span class="keyword">new</span> <span class="built_in">Player</span>(<span class="string">&quot;Dylan&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><blockquote><p>Entity construct</p><p>Entity construct<br>Player construct</p></blockquote><h2 id="【P27】C-继承"><a href="#【P27】C-继承" class="headerlink" title="【P27】C++继承"></a>【P27】C++继承</h2><ul><li><p>当你创建了一个子类，它会继承父类除构造函数外的所有成员变量和成员函数</p></li><li><p>继承给我们提供了这样的一种方式：把一系列类的所有通用的代码（功能）放到基类</p></li><li><p>在定义一个新的类 B 时，如果该类与某个已有的类 A 相似（指的是 B 拥有 A 的全部特点），那么就可以把 A 作为一个基类，而把B作为基类的一个派生类（也称子类）。</p></li><li><p>派生类是通过对基类进行修改和扩充得到的，在派生类中，可以扩充新的成员变量和成员函数。</p></li><li><p>派生类拥有基类的全部成员函数和成员变量，不论是private、protected、public。需要注意的是：在派生类的各个成员函数中，不能访问基类的private成员（即任何<strong>不是私有</strong>的（private）成员，派生类都可以<strong>访问</strong>到）。</p><p><strong>继承的格式</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> 派生类名：<span class="keyword">public</span> 基类名</span><br><span class="line">&#123;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="【P28】C-虚函数"><a href="#【P28】C-虚函数" class="headerlink" title="【P28】C++虚函数"></a>【P28】C++虚函数</h2><ul><li>虚函数可以让我们在子类中重写方法。</li><li>格式</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">claee 父类名&#123;</span><br><span class="line">   <span class="comment">//virtual + 函数</span></span><br><span class="line">   <span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">GetName</span><span class="params">()</span></span>&#123;</span><br><span class="line">       .....</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码案例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Entity</span>()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Entity</span>(<span class="type">const</span> std::string&amp; name)</span><br><span class="line">:<span class="built_in">m_name</span>(name)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> std::string <span class="title">getName</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> m_name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::string m_name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Player</span> : <span class="keyword">public</span> Entity</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Player</span>(<span class="type">const</span> std::string&amp; name)</span><br><span class="line">:<span class="built_in">p_name</span>(name)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::string <span class="title">getName</span><span class="params">()</span> <span class="keyword">override</span>   <span class="comment">//C++11新标准允许给被重写的函数用&quot;override&quot;关键字标记,增强代码可读性</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> p_name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::string p_name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintName</span><span class="params">(Entity* entity)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Name: &quot;</span> &lt;&lt; entity-&gt;<span class="built_in">getName</span>() &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Entity* e = <span class="keyword">new</span> <span class="built_in">Entity</span>(<span class="string">&quot;NULL&quot;</span>);</span><br><span class="line">Player* p = <span class="keyword">new</span> <span class="built_in">Player</span>(<span class="string">&quot;Dylan&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">PrintName</span>(e);</span><br><span class="line"><span class="built_in">PrintName</span>(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="【P29】C-纯虚函数"><a href="#【P29】C-纯虚函数" class="headerlink" title="【P29】C++纯虚函数"></a>【P29】C++纯虚函数</h2><p>含有纯虚函数的基类称为<strong>抽象类</strong>，它<strong>不能被实例化</strong></p><ul><li><strong>纯虚函数优点</strong></li></ul><blockquote><p>防止派生类忘记实现虚函数，<strong>纯虚函数使得派生类必须实现基类的虚函数</strong>。<br>在某些场景下，创建基类对象是不合理的，含有纯虚函数的类称为<strong>抽象类</strong>，它<strong>不能直接生成对象</strong></p></blockquote><ul><li><strong>声明方法</strong>: 在基类中纯虚函数的后面加 <strong>&#x3D;0</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">funtion</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> std::string <span class="title">GetName</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h2 id="【P30】C-可见性"><a href="#【P30】C-可见性" class="headerlink" title="【P30】C++可见性"></a>【P30】C++可见性</h2><ul><li>可见性是一个属于面向对象编程的概念，它指的是类的某些成员或方法实际上是否可见。可见性是指：谁能看到它们，谁能调用它们，谁能使用它们等这些内容</li><li>可见性是对程序实际运行方式、程序性能或类似的东西没影响。它只是单纯的是语言层面的概念，让你能够写出更好的代码或者帮助你组织代码</li><li>C++中有三个基础的可见修饰符（访问修饰符）：<strong>private、protected、public</strong></li></ul><blockquote><p><strong>private</strong>：只有<strong>自己的类和它的友元</strong>才能访问（继承的子类也不行，友元的意思就是可以允许你访问这个类的私有成员）<br><strong>protected</strong>：这个<strong>类以及它的所有派生类</strong>都可以访问到这些成员。（但在main函数中new一个类就不可见，这其实是因为main<strong>函数不是类的函数</strong>，对main函数是不可访问的）<br><strong>public：</strong>谁都可见</p></blockquote><ul><li>可见性是让代码更加容易维护，容易理解，不管是阅读代码还是扩展代码。这与性能无关，也不会产生完全不同的代码。可见性不是CPU需要理解的东西，这不是你的电脑需要知道的东西。它只是人类发明的东西，为了帮助其他人和自己</li></ul><h2 id="【P34】C-中的const"><a href="#【P34】C-中的const" class="headerlink" title="【P34】C++中的const"></a>【P34】C++中的const</h2><p>const关键字是一种修饰符。所谓“修饰符”，就是在编译器进行编译的过程中，给编译器一些“要求”或“提示”，但修饰符本身，并不产生任何实际代码。就 const 修饰符而言，它用来告诉编译器，<strong>被修饰的这些东西，具有“只读”的特点</strong>。在编译的过程中，一旦我们的代码试图去改变这些东西，编译器就应该给出错误提示</p><p>所以，const修饰符的作用主要是利用编译器帮助我们检查自己代码的正确性。我们使用const在源码中标记出“不应该改变”的地方，然后利用编译器，帮助我们检查这些地方是否真的没有被改变过。如果我们不小心去修改了这些地方，编译器就会报错，从而帮助我们纠正错误。使用const和不使用const，对于最终编译产生的代码并没有影响。</p><p>虽然const对于最终代码没有影响，但是<strong>尽可能使用const，将帮助我们避免很多错误，提高程序正确率</strong></p><h3 id="const指针的用法"><a href="#const指针的用法" class="headerlink" title="const指针的用法"></a>const指针的用法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> Age =<span class="number">90</span>;</span><br><span class="line"><span class="type">int</span>* a = <span class="keyword">new</span> <span class="type">int</span>;</span><br><span class="line">*a = <span class="number">2</span>;</span><br><span class="line">a =(<span class="type">int</span>*)&amp;Age     <span class="comment">//ok</span></span><br></pre></td></tr></table></figure><p>上述代码我们可以做两件事，一可以<strong>改变这个指针的内容</strong>，就是指针指向的内存内容；二可以<strong>改变指针指向的内存地址</strong></p><blockquote><p>**const int*<strong>（同</strong>int const*<strong>）  常量指针<br><strong>可以改变指针指向的地址,不能再去修改</strong>指针指向的内容</strong></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span>* a = <span class="keyword">new</span> <span class="type">int</span>;</span><br><span class="line">*a = <span class="number">2</span>;        <span class="comment">//error! 不能再去修改指针指向的内容</span></span><br><span class="line">a =(<span class="type">int</span>*)&amp;Age  <span class="comment">//ok</span></span><br></pre></td></tr></table></figure><blockquote><p><em><em>int</em> const</em>*  指针常量<br><strong>可以改变指针指向的内容,不能再去修改指针指向的地址</strong></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* <span class="type">const</span> a = <span class="keyword">new</span> <span class="type">int</span>;</span><br><span class="line">*a = <span class="number">2</span>;        <span class="comment">//ok</span></span><br><span class="line">a =(<span class="type">int</span>*)&amp;Age  <span class="comment">//error! 不能再去修改指针指向的地址</span></span><br></pre></td></tr></table></figure><blockquote><p><code>const int* const</code><br><strong>既不能改变指针指向的内容,也不能改变指针指向的地址</strong></p></blockquote><h3 id="在类和方法中的const"><a href="#在类和方法中的const" class="headerlink" title="在类和方法中的const"></a><strong>在类和方法中的const</strong></h3><p>和变量没有关系，而是用在方法名的后面( <strong>只有类才有这样的写法</strong> )，意味着这个方法不会修改任何实际的类</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">GetX</span><span class="params">()</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_X = <span class="number">2</span>;           <span class="comment">//Error</span></span><br><span class="line"><span class="keyword">return</span> m_X;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SetX</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">m_X = x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">int</span> m_X;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintEntity</span><span class="params">(<span class="type">const</span> Entity&amp; e)</span>  <span class="comment">//const Entity调用const函数</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; e.<span class="built_in">GetX</span>() &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Entity e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上面的代码为例，有时我们会写两种GetX()，一个有const一个没有，然后上面传入<code>const Enity&amp;</code>的方法就会调用const的GetX()版本</p><p>我们把成员方法标记为const是因为<strong>如果我们在编码的过程中有一些“只读”的对象，我们需要调用const方法</strong>。如果没有const方法，那<code>const 类名&amp;</code> 对象就调用不了该方法</p><ul><li><p>如果一个方法在调用时，实际上没有修改或者不应该修改传入的对象，<strong>总是</strong>标记你的方法为const，否则在有常量引用或类似的情况下就用不了你的方法。</p></li><li><p>在<strong>const函数中</strong>， 如果要修改别的变量，可以用<strong>关键字mutable</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span></span><br><span class="line">  &#123;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">      <span class="type">int</span> m_x,m_y;</span><br><span class="line">      <span class="keyword">mutable</span> var;        <span class="comment">//把类成员标记为mutable，意味着类中的const方法可以修改这个成员</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">      <span class="function"><span class="type">int</span> <span class="title">Getx</span><span class="params">()</span> <span class="type">const</span> </span></span><br><span class="line"><span class="function">      </span>&#123;   </span><br><span class="line">          var = <span class="number">2</span>;    <span class="comment">//ok mutable var</span></span><br><span class="line">          m_x = <span class="number">2</span>;    <span class="comment">//ERROR!</span></span><br><span class="line">          <span class="keyword">return</span> m_x; </span><br><span class="line">      &#125;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="【P35】C-mutable关键字"><a href="#【P35】C-mutable关键字" class="headerlink" title="【P35】C++mutable关键字"></a>【P35】C++mutable关键字</h2><p>mutable有两种不同的用途：</p><blockquote><ol><li>与const一起用(最主要的用法，见上一篇)</li><li>lambda表达式，或者同时包含这两种情况</li></ol></blockquote><ul><li><p>引用传递</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">8</span>;  </span><br><span class="line">    <span class="keyword">auto</span> f = [&amp;]()</span><br><span class="line">    &#123;</span><br><span class="line">        x++;  <span class="comment">//如果是值传递，则会报错。</span></span><br><span class="line">        std::cout &lt;&lt; y &lt;&lt; std::endl;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">f</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>值传递</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">auto</span> f = [=]()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> y = x;    </span><br><span class="line">        y++;</span><br><span class="line">        std::cout &lt;&lt; y &lt;&lt; std::endl;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">f</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加mutable关键字，会干净许多（但本质是一样的）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> x = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">auto</span> f = [=]() <span class="keyword">mutable</span></span><br><span class="line">    &#123;</span><br><span class="line">        x++;</span><br><span class="line">        std::cout &lt;&lt; x &lt;&lt; std::endl;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">f</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="【P38】创建并初始化C-对象"><a href="#【P38】创建并初始化C-对象" class="headerlink" title="【P38】创建并初始化C++对象"></a>【P38】创建并初始化C++对象</h2><ul><li>基本上，当我们编写了一个类并且到了我们实际开始使用该类的时候，就需要实例化它(除非它是完全静态的类)</li><li>实例化类有两种选择，这两种选择的区别是内存来自哪里，我们的对象实际上会创建在哪里</li><li>应用程序会把内存分为两个主要部分：堆和栈。还有其他部分，比如源代码部分，此时它是机器码</li></ul><h3 id="栈分配"><a href="#栈分配" class="headerlink" title="栈分配"></a>栈分配</h3><p>格式:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 栈中创建</span></span><br><span class="line">Entity entity;</span><br><span class="line"><span class="function">Entity <span class="title">entity</span><span class="params">(<span class="string">&quot;lk&quot;</span>)</span></span>;</span><br></pre></td></tr></table></figure><ul><li>什么时候栈分配？几乎任何时候，因为在C++中这是初始化对象最快的方式和最受管控的方式</li><li>什么时候不栈分配？ 如果创建的<strong>对象太大</strong>，或是需要显示地控制对象的<strong>生存期</strong>，那就需要堆上创建</li></ul><h3 id="堆分配"><a href="#堆分配" class="headerlink" title="堆分配"></a>堆分配</h3><p>格式:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 堆中创建</span></span><br><span class="line">Entity* entity = <span class="keyword">new</span> <span class="built_in">Entity</span>(<span class="string">&quot;lk&quot;</span>);</span><br><span class="line"><span class="keyword">delete</span> entity； <span class="comment">//清除</span></span><br></pre></td></tr></table></figure><ul><li>当我们调用new Entity时，实际发生的就是我们在堆上分配了内存，我们调用了构造函数，然后这个new Entity实际上会返回一个Entity指针，它返回了这个entity在堆上被分配的内存地址，这就是为什么我们要声明成Entity*类型</li><li>如果你使用了new关键字，那你就要用delete来进行清除</li></ul><h2 id="【P40】C-隐式转换与explicit关键字"><a href="#【P40】C-隐式转换与explicit关键字" class="headerlink" title="【P40】C++隐式转换与explicit关键字"></a>【P40】C++隐式转换与explicit关键字</h2><h3 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h3><blockquote><p>隐式转换<strong>只能进行一次</strong>。这里涉及到编译器的一条规则，编译器每次只能执行一种类<strong>类型的隐式转换</strong>。如果同时提出多个转换请求，编译器则会报错</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::string m_Name;</span><br><span class="line"><span class="type">int</span> m_Age;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Entity</span>(<span class="type">const</span> std::string&amp; name)</span><br><span class="line">:<span class="built_in">m_Name</span>(name),<span class="built_in">m_Age</span>(<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Entity</span>(<span class="type">int</span> age)</span><br><span class="line">:<span class="built_in">m_Name</span>(<span class="string">&quot;unknown&quot;</span>),<span class="built_in">m_Age</span>(age)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintEntity</span><span class="params">(<span class="type">const</span> Entity&amp; e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//print</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">PrintEntity</span>(<span class="string">&quot;Dylan&quot;</span>);                  <span class="comment">//Error</span></span><br><span class="line"><span class="built_in">PrintEntity</span>(<span class="built_in">Entity</span>(<span class="string">&quot;Dylan&quot;</span>));          <span class="comment">//ok</span></span><br><span class="line"><span class="built_in">PrintEntity</span>(std::<span class="built_in">string</span>(<span class="string">&quot;Dylan&quot;</span>));     <span class="comment">//ok</span></span><br><span class="line"></span><br><span class="line">Entity e1 = <span class="string">&quot;Dylan&quot;</span>;                   <span class="comment">//Error</span></span><br><span class="line">Entity e2 = <span class="number">20</span>;                        <span class="comment">//ok</span></span><br><span class="line"></span><br><span class="line">    <span class="function">Entity <span class="title">e</span><span class="params">(<span class="number">20</span>)</span></span>;                          <span class="comment">//显式</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上，int型的20就被隐式转换为一个Entity对象，这是<strong>因为Entity类中有一个Entity(int age)构造函数，因此可以调用这个构造函数，然后把23作为他的唯一参数，就可以创建一个Entity对象</strong></p><p>同时我们也能看到，对于语句<code>Entity e1 = &quot;Dylan&quot;;</code>原因是<strong>只能进行一次隐式转换</strong>，”Dylan”是const char数组，这里需要先转换成<code>std::string</code>，再由<code>std::string</code>转换成Entity，语句<code>PrintEntity(&quot;Dylan&quot;);</code>报错也是一样的道理</p><p>最好不写<code>Entity test5 = 23;</code>这样的函数，应尽量避免隐式转换。因为<code>Entity e(20);</code>更清晰</p><h3 id="explicit-关键字"><a href="#explicit-关键字" class="headerlink" title="explicit 关键字"></a>explicit 关键字</h3><p><strong>explicit会禁用隐式转换</strong>，explicit关键字放在构造函数前面</p><p>在构造函数前面加上explicit，这就意味着这个构造函数不会进行隐式转换。比如，如果想用一个整数创建一个Entity对象，就必须显式地调用这个构造函数。在实际使用时，它可以防止意外转换，导致性能问题或bug</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::string m_Name;</span><br><span class="line"><span class="type">int</span> m_Age;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">Entity</span><span class="params">(<span class="type">const</span> std::string&amp; name)</span></span></span><br><span class="line"><span class="function">:m_Name(name),m_Age(<span class="number">-1</span>)</span></span><br><span class="line"><span class="function">&#123;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="title">Entity</span><span class="params">(<span class="type">int</span> age)</span></span></span><br><span class="line"><span class="function">:m_Name(<span class="string">&quot;unknown&quot;</span>),m_Age(age)</span></span><br><span class="line"><span class="function">&#123;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintEntity</span><span class="params">(<span class="type">const</span> Entity&amp; e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//print</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">PrintEntity</span>(<span class="string">&quot;Dylan&quot;</span>);                  <span class="comment">//Error</span></span><br><span class="line"><span class="built_in">PrintEntity</span>(<span class="built_in">Entity</span>(<span class="string">&quot;Dylan&quot;</span>));          <span class="comment">//ok</span></span><br><span class="line"><span class="built_in">PrintEntity</span>(std::<span class="built_in">string</span>(<span class="string">&quot;Dylan&quot;</span>));     <span class="comment">//Error</span></span><br><span class="line"></span><br><span class="line">Entity e1 = <span class="string">&quot;Dylan&quot;</span>;                   <span class="comment">//Error</span></span><br><span class="line">Entity e2 = <span class="number">20</span>;                        <span class="comment">//Error</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Entity</span>(<span class="number">20</span>);                            <span class="comment">//显式            </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="【P41】C-运算符-操作符-及其重载"><a href="#【P41】C-运算符-操作符-及其重载" class="headerlink" title="【P41】C++运算符(操作符)及其重载"></a>【P41】C++运算符(操作符)及其重载</h2><p>运算符重载概念：对已有的运算符重新进行定义，赋予其另一种功能，以适应不同的数据类型</p><h3 id="“-”和“-”操作符重载"><a href="#“-”和“-”操作符重载" class="headerlink" title="“+”和“*”操作符重载"></a>“+”和“*”操作符重载</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vector2</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">float</span> x, y;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Vector2</span>(<span class="type">float</span> x, <span class="type">float</span> y)</span><br><span class="line">:<span class="built_in">x</span>(x),<span class="built_in">y</span>(y) &#123;&#125;</span><br><span class="line"></span><br><span class="line">Vector2 <span class="keyword">operator</span>+(<span class="type">const</span> Vector2&amp; other) <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>  <span class="built_in">Vector2</span>(x + other.x, y + other.y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vector2 <span class="keyword">operator</span>*(<span class="type">const</span> Vector2&amp; other) <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Vector2</span>(x * other.x, y * other.y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Vector2 <span class="title">speed</span><span class="params">(<span class="number">1.5f</span>, <span class="number">3.5f</span>)</span></span>;</span><br><span class="line"><span class="function">Vector2 <span class="title">position</span><span class="params">(<span class="number">4.5f</span>, <span class="number">6.5f</span>)</span></span>;</span><br><span class="line"><span class="function">Vector2 <span class="title">powerup</span><span class="params">(<span class="number">2.0f</span>, <span class="number">2.0f</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">Vector2 result = position + speed * powerup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="“-lt-lt-”操作符的重载"><a href="#“-lt-lt-”操作符的重载" class="headerlink" title="“&lt;&lt;”操作符的重载"></a>“&lt;&lt;”操作符的重载</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vector2</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">friend</span> std::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream&amp; out, <span class="type">const</span> Vector2&amp; other);   <span class="comment">//友元函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="type">float</span> x, y;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Vector2</span>(<span class="type">float</span> x, <span class="type">float</span> y)</span><br><span class="line">:<span class="built_in">x</span>(x), <span class="built_in">y</span>(y) &#123;&#125;</span><br><span class="line"></span><br><span class="line">Vector2 <span class="keyword">operator</span>+(<span class="type">const</span> Vector2&amp; other) <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>  <span class="built_in">Vector2</span>(x + other.x, y + other.y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Vector2 <span class="keyword">operator</span>*(<span class="type">const</span> Vector2&amp; other) <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Vector2</span>(x * other.x, y * other.y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream&amp; out, <span class="type">const</span> Vector2&amp; other)</span><br><span class="line">&#123;</span><br><span class="line">out &lt;&lt; other.x &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; other.y;</span><br><span class="line"><span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Vector2 <span class="title">speed</span><span class="params">(<span class="number">1.5f</span>, <span class="number">3.5f</span>)</span></span>;</span><br><span class="line"><span class="function">Vector2 <span class="title">position</span><span class="params">(<span class="number">4.5f</span>, <span class="number">6.5f</span>)</span></span>;</span><br><span class="line"><span class="function">Vector2 <span class="title">powerup</span><span class="params">(<span class="number">2.0f</span>, <span class="number">2.0f</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">Vector2 result = position + speed * powerup;</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; result &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="bool操作符的重载"><a href="#bool操作符的重载" class="headerlink" title="bool操作符的重载"></a>bool操作符的重载</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>==(<span class="type">const</span> Vector2&amp; other) <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> x == other.x &amp;&amp; y == other.y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>!=(<span class="type">const</span> Vector2&amp; other) <span class="type">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> !(*<span class="keyword">this</span> == other);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="【P44】C-的智能指针"><a href="#【P44】C-的智能指针" class="headerlink" title="【P44】C++的智能指针"></a>【P44】C++的智能指针</h2><ul><li>智能指针本质上是原始指针的包装。当你创建一个智能指针，它会调用new并为你分配内存，然后基于你使用的智能指针，这些内存会在某一时刻自动释放</li><li>优先使用unique_ptr，其次考虑shared_ptr</li></ul><blockquote><p>尽量使用unique_ptr因为它有一个较低的开销，但如果你需要在对象之间共享，不能使用unique_ptr的时候，就使用shared_ptr</p></blockquote><h3 id="作用域指针unique-ptr的使用"><a href="#作用域指针unique-ptr的使用" class="headerlink" title="作用域指针unique_ptr的使用"></a>作用域指针unique_ptr的使用</h3><ul><li>要访问所有这些智能指针，你首先要做的是包含<strong>memory头文件</strong></li><li>unique_ptr是作用域指针，意味着超出作用域时，它会被销毁然后调用delete</li><li>unique_ptr是<strong>唯一的</strong>，不可复制，不可分享</li><li>unique_ptr构造函数实际上<strong>是explicit的</strong>，没有构造函数的隐式转换,需要<strong>显式</strong>调用构造函数</li><li>最好使用<code>std::unique_ptr&lt;Entity&gt; entity = std::make_unique&lt;Entity&gt;();</code> 因为如果构造函数碰巧抛出异常，不会得到一个没有引用的悬空指针从而造成内存泄露,它会稍微安全一些</li><li><code>std::make_unique&lt;&gt;()</code>是在<strong>C++14</strong>引入的，<strong>C++11</strong>不支持</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Entity</span>()</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Created entity&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Entity</span>()</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Destroyed entity&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#123;</span><br><span class="line">std::unique_ptr&lt;Entity&gt; e = std::<span class="built_in">make_unique</span>&lt;Entity&gt;();</span><br><span class="line">e-&gt;<span class="built_in">Print</span>();</span><br><span class="line"></span><br><span class="line">std::unique_ptr&lt;Entity&gt; e0 = e;                 <span class="comment">//Error</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="共享指针shared-ptr的使用"><a href="#共享指针shared-ptr的使用" class="headerlink" title="共享指针shared_ptr的使用"></a>共享指针shared_ptr的使用</h3><p>shared_ptr的工作原理是<strong>引用计数</strong>，具有一定的开销</p><blockquote><p>引用计数基本上是一种方法，多个指针都存储某个对象的地址，只有当所有指针都被销毁时，这个对象才被析构<br>例如：我创建了一个共享指针shared_ptr，并指向一个对象的地址，我又创建了另一个shared_ptr来复制它，我的引用计数是2，第一个和第二个，共2个。当第一个死的时候，我的引用计数器现在减少1，然后当最后一个shared_ptr死了，引用计数回到零，内存就会被释放</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Entity</span>()</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Created entity&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Entity</span>()</span><br><span class="line">&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Destroyed entity&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#123;</span><br><span class="line">std::shared_ptr&lt;Entity&gt; e0;</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//  std::shared_ptr&lt;Entity&gt; sharedEntity = sharedEntity(new Entity());     //不推荐</span></span><br><span class="line">std::shared_ptr&lt;Entity&gt; sharedEntity = std::<span class="built_in">make_shared</span>&lt;Entity&gt;();         <span class="comment">//ok</span></span><br><span class="line">e0 = sharedEntity;     <span class="comment">//可复制</span></span><br><span class="line">&#125;  <span class="comment">//此时sharedEntity已经“死了”,但没有调用析构，因为e0仍然是活的，并且持有对该Entity的引用，此时计数由2-&gt;1</span></span><br><span class="line">&#125;  <span class="comment">//析构被调用，因为所有的引用都消失，计数便变为0，内存被释放</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="弱指针weak-ptr的使用"><a href="#弱指针weak-ptr的使用" class="headerlink" title="弱指针weak_ptr的使用"></a>弱指针weak_ptr的使用</h3><ol><li>可以和共享指针shared_ptr一起使用</li><li>weak_ptr可以被复制，但是同时<strong>不会增加额外的控制块来控制计数</strong>，仅仅声明这个指针还活着</li></ol><blockquote><p>当你将一个shared_ptr赋值给另外一个shared_ptr，引用计数++，而若是<strong>把一个shared_ptr赋值给一个weak_ptr时，它不会增加引用计数</strong>。有时候只是想找个指向这块内存的指针，但我不想把这块内存的生命周期与这个指针关联，这种情况下，弱指针就意味着“我指向这东西，但这东西什么时候释放不关我事儿”</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    std::weak_ptr&lt;Entity&gt; e0;</span><br><span class="line">    &#123;</span><br><span class="line">        std::shared_ptr&lt;Entity&gt; sharedEntity = std::<span class="built_in">make_shared</span>&lt;Entity&gt;();</span><br><span class="line">        e0 = sharedEntity;</span><br><span class="line">    &#125; <span class="comment">//此时，此析构被调用，内存被释放，weak_ptr此时指向一个无效的Entity</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="【P47】-C-的动态数组-std-vector"><a href="#【P47】-C-的动态数组-std-vector" class="headerlink" title="【P47】 C++的动态数组(std::vector)"></a>【P47】 C++的动态数组(std::vector)</h2><ol><li>vector本质上是一个动态数组,是内存连续的数组</li><li>它的使用需要包含头文件<code>#include &lt;vector&gt;</code></li><li>使用格式：类型尽量<strong>使用对象</strong>而非指针。</li></ol><blockquote><p><code>std::vector&lt;T&gt; a;</code>          &#x2F;&#x2F;T是一种模板类型，尽量使用对象而非指针</p><p><code>a.erase();</code>                        &#x2F;&#x2F;清除指定元素，参数是迭代器类型</p><p><code>a.clear();</code>                        &#x2F;&#x2F;清除数组列表</p></blockquote><p>使用案例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Vertex</span> &#123;</span><br><span class="line"><span class="type">float</span> x, y, z;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::ostream&amp; <span class="keyword">operator</span>&lt;&lt;(std::ostream&amp; out, <span class="type">const</span> Vertex&amp; vertex)</span><br><span class="line">&#123;</span><br><span class="line">out &lt;&lt; vertex.x &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; vertex.y &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; vertex.z;</span><br><span class="line"><span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::vector&lt;Vertex&gt; vertices;</span><br><span class="line"></span><br><span class="line">vertices.<span class="built_in">push_back</span>(&#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> &#125;);</span><br><span class="line">vertices.<span class="built_in">push_back</span>(&#123; <span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Vertex&amp; v : vertices) &#123;</span><br><span class="line">std::cout &lt;&lt; v &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    vertices.<span class="built_in">erase</span>(vertices.<span class="built_in">begin</span>() + <span class="number">1</span>);        <span class="comment">//清除第二个元素</span></span><br><span class="line">    vertices.<span class="built_in">clear</span>();                            <span class="comment">//清空数组列表</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="【P48】C-的std-vector使用优化"><a href="#【P48】C-的std-vector使用优化" class="headerlink" title="【P48】C++的std::vector使用优化"></a>【P48】C++的std::vector使用优化</h2><p>vector的优化策略：</p><blockquote><p><strong>问题1：</strong>当向vector数组中<strong>添加新元素</strong>时，为了扩充容量，<strong>当前的vector的内容会从内存中的旧位置复制到内存中的新位置</strong>(产生一次复制)，然后删除旧位置的内存。 简单说，push_back时，容量不够，会自动调整大小，重新分配内存。这就是将代码拖慢的原因之一</p><p><strong>解决办法：</strong> 使用<code>vertices.reserve(n)</code> ，直接指定容量大小，避免重复分配产生的复制浪费<br><strong>问题2：</strong>在非vector内存中创建对象进行初始化时，即push_back() 向容器尾部添加元素时，首先会创建一个临时容器对象（不在已经分配好内存的vector中）并对其追加元素，然后再将这个对象拷贝或者移动到<strong>我们真正想添加元素的容器</strong>中 。这其中就造成了一次复制浪费</p><p><strong>解决办法：</strong> <code>emplace_back()</code>，直接在容器尾部创建元素，即直接在已经分配好内存的那个容器中直接添加元素，不创建临时对象</p></blockquote><p>简单的说：</p><blockquote><p><strong>reserve提前申请内存</strong>，避免动态申请开销，<strong>emplace_back直接在容器尾部创建元素</strong>，省略拷贝或移动过程</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Vertex</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> x, y, z;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Vertex</span>(<span class="type">float</span> x, <span class="type">float</span> y, <span class="type">float</span> z)</span><br><span class="line">        : <span class="built_in">x</span>(x), <span class="built_in">y</span>(y), <span class="built_in">z</span>(z)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">Vertex</span>(<span class="type">const</span> Vertex&amp; vertex)</span><br><span class="line">        : <span class="built_in">x</span>(vertex.x), <span class="built_in">y</span>(vertex.y), <span class="built_in">z</span>(vertex.z)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Copied!&quot;</span> &lt;&lt; std::endl;    <span class="comment">//拷贝函数调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::vector&lt;Vertex&gt; vertices;</span><br><span class="line">    vertices.<span class="built_in">push_back</span>(<span class="built_in">Vertex</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>));       <span class="comment">//同vertices.push_back(&#123; 1, 2, 3 &#125;);</span></span><br><span class="line">    vertices.<span class="built_in">push_back</span>(<span class="built_in">Vertex</span>(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>));</span><br><span class="line">    vertices.<span class="built_in">push_back</span>(<span class="built_in">Vertex</span>(<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><blockquote><p>Copied!<br>Copied!<br>Copied!<br>Copied!<br>Copied!<br>Copied!</p></blockquote><p><strong>发生六次复制的原因：</strong></p><blockquote><p>第一次push_back，capacity扩容到1，临时对象拷贝到真正的vertices所占内存中，第一次Copied</p><p>第二次push_back，capacity扩容到2，vertices进行内存搬移产生的拷贝为第二次Copied，然后再是临时对象的搬移，为第三次Copied</p><p>第三次push_back，capacity扩容到3，vertices进行内存搬移产生的拷贝为第四、五次Copied，然后再是临时对象的搬移为第六次Copied</p><p>所以它3次push_back对应输出Copied的次数分别是1，3，6。由此类推，它的复制次数是这样递增的：1+2+3+…</p></blockquote><p>解决：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;   </span><br><span class="line">    std::vector&lt;Vertex&gt; vertices;</span><br><span class="line">    <span class="comment">//ver 1 : copy 6 times</span></span><br><span class="line">    vertices.<span class="built_in">push_back</span>(&#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> &#125;);</span><br><span class="line">    vertices.<span class="built_in">push_back</span>(&#123; <span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span> &#125;);</span><br><span class="line">    vertices.<span class="built_in">push_back</span>(&#123; <span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span> &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//ver 2 : copy 3 times</span></span><br><span class="line">    vertices.<span class="built_in">reserve</span>(<span class="number">3</span>);</span><br><span class="line">    vertices.<span class="built_in">push_back</span>(&#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> &#125;);</span><br><span class="line">    vertices.<span class="built_in">push_back</span>(&#123; <span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span> &#125;);</span><br><span class="line">    vertices.<span class="built_in">push_back</span>(&#123; <span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span> &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//ver 3 : copy 0 times</span></span><br><span class="line">    vertices.<span class="built_in">reserve</span>(<span class="number">3</span>);</span><br><span class="line">    vertices.<span class="built_in">emplace_back</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">    vertices.<span class="built_in">emplace_back</span>(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">    vertices.<span class="built_in">emplace_back</span>(<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="【P53】C-的模板"><a href="#【P53】C-的模板" class="headerlink" title="【P53】C++的模板"></a>【P53】C++的模板</h2><p><strong>模板</strong>：模板允许你定义一个可以根据你的用途进行编译的模板（有意义下）。故所谓模板，就是让编译器基于DIY的规则去为你写代码</p><p>函数模板格式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> 形参名，<span class="keyword">class</span> 形参名，...&gt; 返回类型 函数名(参数列表) &#123; 函数体 &#125;</span><br></pre></td></tr></table></figure><p>代码案例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="type">void</span> <span class="title">Print</span><span class="params">(T temp)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">Print</span>(<span class="number">96</span>);        <span class="comment">//这里其实是隐式的传递信息给模板，可读性不高</span></span><br><span class="line">    <span class="built_in">Print</span>&lt;<span class="type">int</span>&gt;(<span class="number">96</span>);   <span class="comment">//可以显示的定义模板参数，声明函数接受的形参的类型</span></span><br><span class="line">    <span class="built_in">Print</span>&lt;<span class="type">char</span>&gt;(<span class="number">96</span>);  <span class="comment">//输出的可以是数字，也可以是字符，这样的操纵性强了很多</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类模板格式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span>  形参名，<span class="keyword">class</span> 形参名，…&gt; <span class="keyword">class</span> 类名 &#123; ... &#125;;</span><br></pre></td></tr></table></figure><p>代码案例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可以传类型，也可以传数字，功能太强大了</span></span><br><span class="line"><span class="comment">//两个模板参数：类型和大小</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="type">int</span> size&gt; <span class="keyword">class</span> <span class="title class_">Array</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T m_Array[size];            <span class="comment">//在栈上分配一个数组，而为了知道它的类型和大小，要用模板传一个类型和一个整型size过来</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Array&lt;<span class="type">int</span>, <span class="number">5</span>&gt; array;        <span class="comment">//用尖括号给模板传递构造的规则</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="【P54】C-的堆和栈内存的比较"><a href="#【P54】C-的堆和栈内存的比较" class="headerlink" title="【P54】C++的堆和栈内存的比较"></a>【P54】C++的堆和栈内存的比较</h2><ol><li><p>当我们的程序开始的时候，程序被分成了一堆不同的内存区域，除了堆和栈以外，还有很多东西，但我们最关心这两个 </p></li><li><p><strong>栈</strong>通常是一个预定义大小的内存区域，通常约为2兆字节左右。<strong>堆</strong>也是一个预定义了默认值的区域，<strong>但是它可以</strong>随着应用程序的进行而改变</p></li><li><p><strong>栈和堆内存区域的实际位置（物理位置）在ram中完全一样</strong>（并不是一个存在CPU缓存而另一个存在其他地方）</p><blockquote><p>在程序中，内存是用来实际储存数据的。我们需要一个地方来储存允许程序所需要的数据（比如局部变量or从文件中读取的东西）。而栈和堆，它们就是可以储存数据的地方，但<strong>栈和堆的工作原理非常非常不同</strong>，但本质上它们做的事情是一样的</p></blockquote></li><li><p>栈和堆的区别</p><p>区别一：定义格式不同</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在栈上分配</span></span><br><span class="line"><span class="type">int</span> val = <span class="number">5</span>; </span><br><span class="line"><span class="comment">//在堆上分配</span></span><br><span class="line"><span class="type">int</span> *hval = <span class="keyword">new</span> <span class="type">int</span>;    <span class="comment">//区别是，我们需要用new关键字来在堆上分配</span></span><br><span class="line">*hval = <span class="number">5</span>;</span><br></pre></td></tr></table></figure><p>区别二：内存分配方式不同</p><p>对栈来说：</p><blockquote><p><strong>在栈上</strong>，分配的内存都是<strong>连续</strong>的。添加一个int，则<strong>栈指针（栈顶部的指针）</strong>就移动4个字节，所以连续分配的数据在内存上都是<strong>连续</strong>的。栈分配数据是直接把数据堆在一起（所做的就是移动栈指针），所以栈分配数据会很快 。<br>如果离开作用域，在栈中分配的所有内存都会弹出，内存被释放。</p></blockquote><p>对堆来说</p><blockquote><p><strong>在堆上</strong>，分配的内存都是<strong>不连续</strong>的，<code>new</code>实际上做的是在内存块的<strong>空闲列表</strong>中找到空闲的内存块，然后把它用一个指针圈起来，然后返回这个指针。（但如果<strong>空闲列表</strong>找不到合适的内存块，则会询问<strong>操作系统</strong>索要更多内存，而这种操作是很麻烦的，潜在成本是巨大的）<br>离开作用域后，堆中的内存仍然存在</p></blockquote></li></ol><p>建议： <strong>能在栈上分配就在栈上分配</strong>，<strong>不能够在栈上分配时或者有特殊需求时（比如需要生存周期比函数作用域更长，或者需要分配一些大的数据），才在堆上分配</strong></p><h2 id="【P56】C-的auto关键字"><a href="#【P56】C-的auto关键字" class="headerlink" title="【P56】C++的auto关键字"></a>【P56】C++的auto关键字</h2><p><strong>auto的使用场景：</strong></p><blockquote><p>在使用iterator 的时候，如：</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">std::vector&lt;std::string&gt; strings;</span><br><span class="line">strings.<span class="built_in">push_back</span>(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line">strings.<span class="built_in">push_back</span>(<span class="string">&quot;Orange&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (std::vector&lt;std::string&gt;::iterator it = strings.<span class="built_in">begin</span>();   <span class="comment">//不使用auto</span></span><br><span class="line">    it != strings.<span class="built_in">end</span>(); it++)</span><br><span class="line">&#123;</span><br><span class="line">    std::cout &lt;&lt; *it &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = strings.<span class="built_in">begin</span>(); it != strings.<span class="built_in">end</span>(); it++)      <span class="comment">//使用auto</span></span><br><span class="line">&#123;</span><br><span class="line">    std::cout &lt;&lt; *it &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当类型名过长的时候可以使用auto：</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Device</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DeviceManager</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::unordered_map&lt;std::string, std::vector&lt;Device*&gt;&gt; m_Devices;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">const</span> std::unordered_map&lt;std::string, std::vector&lt;Device*&gt;&gt; &amp;<span class="built_in">GetDevices</span>() <span class="type">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> m_Devices;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    DeviceManager dm;</span><br><span class="line">    <span class="type">const</span> std::unordered_map&lt;std::string, std::vector&lt;Device*&gt;&gt; &amp;devices = dm.<span class="built_in">GetDevices</span>();  <span class="comment">//不使用auto</span></span><br><span class="line">    <span class="type">const</span> <span class="keyword">auto</span>&amp; devices = dm.<span class="built_in">GetDevices</span>();  <span class="comment">//使用auto</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除此之外类型名过长的时候也可以使用using或typedef方法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> DeviceMap = std::unordered_map&lt;std::string, std::vector&lt;Device*&gt;&gt;;</span><br><span class="line"><span class="keyword">typedef</span> std::unordered_map&lt;std::string, std::vector&lt;Device*&gt;&gt; DeviceMap;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> DeviceMap&amp; devices = dm.<span class="built_in">GetDevices</span>();</span><br></pre></td></tr></table></figure><p><strong>auto使用建议</strong>：如果不是上面两种应用场景，请尽量不要使用auto，能不用，就不用</p><h2 id="【P57】C-的静态数组（std-array"><a href="#【P57】C-的静态数组（std-array" class="headerlink" title="【P57】C++的静态数组（std::array)"></a>【P57】C++的静态数组（std::array)</h2><ol><li><p>std::array是一个实际的标准数组类，是C++标准模板库的一部分</p></li><li><p><strong>静态</strong>的是指<strong>不增长的数组</strong>，当<strong>创建array</strong>时就要<strong>初始化其大小</strong>，不可再改变</p></li><li><p>使用格式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;array&gt;</span>  <span class="comment">// 先要包含头文件</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::array&lt;<span class="type">int</span>, 5&gt; data;  <span class="comment">//定义，有两个参数，一个指定类型，一个指定大小</span></span><br><span class="line">    data[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    data[<span class="number">4</span>] = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>array和原生数组都是创建在栈上的（vector是在堆上创建底层数据储存的）</p></li><li><p>原生数组越界的时候不会报错，而array会有越界检查，会报错提醒。</p></li><li><p>使用std::array的好处是可以<strong>访问它的大小</strong>（通过s<strong>ize()<strong>函数），它是一个</strong>类</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintArray</span><span class="params">(<span class="type">const</span> std::array&lt;<span class="type">int</span>, <span class="number">5</span>&gt;&amp; data)</span>  <span class="comment">//显式指定了大小</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>;i &lt; data.<span class="built_in">size</span>();i++)   <span class="comment">//遍历数组</span></span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; data[i] &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::array&lt;<span class="type">int</span>, 5&gt; data;</span><br><span class="line">    data[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    data[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    data[<span class="number">2</span>] = <span class="number">2</span>;</span><br><span class="line">    data[<span class="number">3</span>] = <span class="number">3</span>;</span><br><span class="line">    data[<span class="number">4</span>] = <span class="number">4</span>;</span><br><span class="line">    <span class="built_in">PrintArray</span>(data);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何传入一个<strong>数组大小和所存数据类型未知的标准数组作为参数</strong>？</p><p>方法：使用模板</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printarray</span><span class="params">(<span class="type">const</span> T &amp;data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; data.<span class="built_in">size</span>(); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; data[i] &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="type">unsigned</span> <span class="type">long</span> N&gt;   <span class="comment">// or template &lt;typename T, size_t N&gt;</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printarray2</span><span class="params">(<span class="type">const</span> std::array&lt;T, N&gt; &amp;data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        std::cout &lt;&lt; data[i] &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::array&lt;<span class="type">int</span>, 5&gt; data;</span><br><span class="line">    data[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">    data[<span class="number">4</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printarray</span>(data);</span><br><span class="line">    <span class="built_in">printarray2</span>(data);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="【P58】C-的函数指针"><a href="#【P58】C-的函数指针" class="headerlink" title="【P58】C++的函数指针"></a>【P58】C++的函数指针</h2><p>函数实际上是CPU的指令，本质是二进制文件，可以获取这些二进制文件的地址，即函数指针</p><p>定义格式：<code>data_types (*func_pointer) ( data_types arg1, data_types arg2, ..., data_types argn);</code></p><p>代码案例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;hello，world&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//void(*function)() = Print； 标准写法，但一般用auto就可以了</span></span><br><span class="line">    <span class="keyword">auto</span> function = Print;  <span class="comment">//OK</span></span><br><span class="line">    <span class="built_in">function</span>();             <span class="comment">//调用函数</span></span><br><span class="line">    <span class="comment">//这里函数指针其实也用到了解引用（*），这里是发生了隐式的转化，使得代码看起来更加简洁明了</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以用typedef或者using来使用函数指针：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">HelloWorld</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Hello World,value: &quot;</span> &lt;&lt; a &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">typedef</span> <span class="title">void</span><span class="params">(*HelloWorldFunction)</span><span class="params">(<span class="type">int</span>)</span></span>;  <span class="comment">//对于有参数的函数指针，在使用的时候传上对应参数即可</span></span><br><span class="line">    <span class="comment">//使用using：using HelloWorldFunction = void(*)(int);</span></span><br><span class="line">    HelloWorldFunction function = HelloWorld;</span><br><span class="line">    <span class="built_in">function</span>(<span class="number">888</span>);       <span class="comment">//传入参数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实用场景：函数指针<strong>常见的用途之一</strong>是作为参数传递到其他函数里去</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintValue</span><span class="params">(<span class="type">int</span> value)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; value &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//下面就将一个函数作为形参传入另一个函数里</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ForEach</span><span class="params">(<span class="type">const</span> std::vector&lt;<span class="type">int</span>&gt;&amp; values, <span class="type">void</span>(*func)(<span class="type">int</span>))</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> v : values) &#123;</span><br><span class="line">        <span class="built_in">func</span>(v);         <span class="comment">//就可以在当前函数里用其他函数了</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; values = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line">    <span class="built_in">ForEach</span>(values, PrintValue);   <span class="comment">//这里传入了一个函数指针进去</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>优化lambda</p><blockquote><p><strong>lambda本质上是一个普通的函数</strong>，只是它不像普通函数这样声明，它是我们的代码<strong>在编译过程中生成的，用完即弃的函数</strong>，不算一个真正的函数，是<strong>匿名函数</strong><br>格式：<code>[] (&#123;形参表&#125;) &#123;函数内容&#125;</code></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">ForEach</span><span class="params">(<span class="type">const</span> std::vector&lt;<span class="type">int</span>&gt;&amp; values, <span class="type">void</span>(*function)(<span class="type">int</span>))</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> temp : values) &#123;</span><br><span class="line">        <span class="built_in">function</span>(temp);     <span class="comment">//正常调用lambda函数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; values = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line">    <span class="built_in">ForEach</span>(values, [](<span class="type">int</span> val)&#123; std::cout &lt;&lt; val &lt;&lt; std::endl; &#125;);   </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="【P59】C-的lambda"><a href="#【P59】C-的lambda" class="headerlink" title="【P59】C++的lambda"></a>【P59】C++的lambda</h2><ol><li><p>lambda本质上是一个<strong>匿名函数</strong>，用这种方式创建函数不需要实际创建一个函数，在使用函数指针的时候可以考虑使用lambda表达式</p></li><li><p>lambda表达式的写法(使用格式)：<code>[]( &#123;参数表&#125; )&#123; 函数体 &#125;</code></p><blockquote><p>中括号<strong>表示的是</strong>捕获，<strong>描述了上下文中哪些数据可以被lambda使用</strong>，以及<strong>使用的方式</strong>是传值还是传引用</p></blockquote></li></ol><p>如果使用捕获,则：</p><ul><li>添加头文件： <code>#include &lt;functional&gt;</code></li><li>修改相应的函数签名 <code>std::function &lt;void(int)&gt; func</code>替代 <code>void(*func)(int)</code></li><li>捕获[]使用方式：</li></ul><blockquote><ul><li><code>[&amp;]</code>以引用隐式捕获被使用的自动变量，即将所有变量<strong>值传递</strong>到lambda中</li><li><code>[=]</code>以复制隐式捕获被使用的自动变量，将所有变量<strong>引用传递</strong>到lambda中</li><li><code>[a]</code>是将变量a通过值传递，如果是<code>[&amp;a]</code>就是将变量a引用传递<br>它可以有0个或者多个捕获，详情参考：<a href="https://zh.cppreference.com/w/cpp/language/lambda">https://zh.cppreference.com/w/cpp/language/lambda</a></li></ul></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;functional&gt;</span>         <span class="comment">//要用捕获就必须添加该头文件，使用C++新的函数指针</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//新的函数指针和原始的函数指针有所不同！</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">ForEach</span><span class="params">(<span class="type">const</span> std::vector&lt;<span class="type">int</span>&gt;&amp; values, <span class="type">const</span> std::function&lt;<span class="type">void</span>(<span class="type">int</span>)&gt;&amp; func)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> temp : values) &#123;</span><br><span class="line">        <span class="built_in">func</span>(temp);     </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; values = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line">    <span class="comment">//注意这里的捕获必须要和C++新的函数指针关联起来</span></span><br><span class="line">    <span class="type">int</span> a = <span class="number">5</span>;        </span><br><span class="line">    <span class="comment">//如果lambda需要外部变量a的值,则在捕获中写入a</span></span><br><span class="line">    <span class="keyword">auto</span> lambda = [a](<span class="type">int</span> val)&#123; std::cout &lt;&lt; a &lt;&lt; std::endl; &#125;  <span class="comment">//函数指针的地方都可以用auto来简化操作，lambda亦是</span></span><br><span class="line">    <span class="built_in">ForEach</span>(values, lambda);    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有一个可选修饰符<strong>mutable</strong>，它<strong>允许lambda函数体</strong>修改通过拷贝传递捕获的参数。若我们直接在lambda中给a赋值会报错，需要写上mutable ，使用案例如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">auto</span> lambda = [=](<span class="type">int</span> value) <span class="keyword">mutable</span> &#123; a = <span class="number">5</span>; std::cout &lt;&lt; <span class="string">&quot;Value: &quot;</span> &lt;&lt; value &lt;&lt; a &lt;&lt; std::endl; &#125;;</span><br></pre></td></tr></table></figure><p>另一个使用lambda的场景：**<code>find_if</code>**</p><blockquote><p>我们还可以写一个lambda接受vector的整数元素，遍历这个vector找到比3大的整数，然后返回它的迭代器，也就是满足条件的第一个元素<br><strong><code>find_if</code><strong>是一个搜索类的函数，区别于<code>find</code>的是：</strong>它可以接受一个函数指针来定义搜索的规则，返回满足这个规则的第一个元素的迭代器</strong>。这个情况就很适合lambda表达式的出场了</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt; values = &#123; <span class="number">1</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span> &#125;;</span><br><span class="line">    <span class="comment">//下面就用到了lambda作为函数指针构成了find_it的规则。返回第一个大于3的元素的迭代器 </span></span><br><span class="line">    <span class="keyword">auto</span> it = std::<span class="built_in">find_if</span>(values.<span class="built_in">begin</span>(), values.<span class="built_in">end</span>(), [](<span class="type">int</span> value) &#123; <span class="keyword">return</span> value &gt; <span class="number">3</span>; &#125;); </span><br><span class="line">    std::cout &lt;&lt; *it &lt;&lt; std::endl;        <span class="comment">//将其输出</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="【P60】为什么我不使用using-namespace-std"><a href="#【P60】为什么我不使用using-namespace-std" class="headerlink" title="【P60】为什么我不使用using namespace std"></a>【P60】为什么我不使用using namespace std</h2><p>1.不容易分辨各类函数的来源</p><blockquote><p>比如我在一个自己的库中定义了一个vector，而标准库里又有一个vector，那么如果用了using namespace std 后，所用的vector到底是哪里的vector呢？</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">std::vector&lt;<span class="type">int</span>&gt;vec1;          <span class="comment">//good</span></span><br><span class="line">DiyClass::vector&lt;<span class="type">int</span>&gt;vec2      <span class="comment">//good</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> DiyClass      <span class="comment">//万一有其他人用了DiyClass的命名空间</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;vec3               <span class="comment">//便会有歧义，完全不知道到底是哪里的vector</span></span><br></pre></td></tr></table></figure><p>2.一定<strong>不要</strong>在<strong>头文件内</strong>使用<code>using namespace std</code></p><blockquote><p>如果别人用了你的头文件，就会把这些命名空间用在了你原本没有打算用的地方，会导致莫名其妙的产生bug，如果有大型项目，追踪起来会很困难。 如果公司有自己的模板库，然后里面有很多重名的类型或者函数，就容易弄混</p></blockquote><p>3.可以就在一些小作用域里用，<strong>但能不用就不用！养成良好的代码书写习惯！</strong></p><h2 id="【P61】C-的命名空间"><a href="#【P61】C-的命名空间" class="headerlink" title="【P61】C++的命名空间"></a>【P61】C++的命名空间</h2><p><strong>介绍：</strong>大型程序往往会使用多个独立开发的库，这些库会定义大量的全局名字，如类、函数和模板等，不可避免会出现某些名字相互冲突的情况。命名空间<code>namespace</code>分割了全局命名空间，其中每个命名空间是一个作用域</p><ol><li><p>命名空间是C++独有的，而C没有，故写C时会有命名冲突的风险</p></li><li><p><strong>类本身就是命名空间</strong> </p><blockquote><p>类外使用一个类内的成员需要加<code>::</code></p></blockquote></li><li><p>命名空间可以不连续。命名空间可以定义在几个不同的部分中，因此命名空间是由几个单独定义的部分组成的，而且一个命名空间的各个组成部分可以分散在多个文件中</p><blockquote><p>也就是说我们可以在多处对同名的命名空间进行创建，但是此时新创建的同名命名空间会被当成是第一个命名空间的补充</p></blockquote></li><li><p>命名空间的主要目的是<strong>避免命名冲突</strong>，便于管理各类命名函数。使用命名空间的原因，是因为我们希望<strong>能够在不同的上下文中调用相同的符号</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">namespace</span> apple &#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* text)</span> </span>&#123;</span><br><span class="line">        std::cout &lt;&lt; text &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> orange &#123;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">print</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* text)</span> </span>&#123;</span><br><span class="line">        std::string temp = text;</span><br><span class="line">        std::<span class="built_in">reverse</span>(temp.<span class="built_in">begin</span>(), temp.<span class="built_in">end</span>());</span><br><span class="line">        std::cout &lt;&lt; temp &lt;&lt; std::endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//using namespace apple::print;   //单独引用apple命名空间的一个成员函数print</span></span><br><span class="line">    <span class="comment">//using namespace apple;          //导入apple命名空间的所有成员</span></span><br><span class="line"></span><br><span class="line">    apple::<span class="built_in">print</span>(<span class="string">&quot;hello&quot;</span>);    <span class="comment">//输出正常text</span></span><br><span class="line">    orange::<span class="built_in">print</span>(<span class="string">&quot;world&quot;</span>);   <span class="comment">//输出反转的text</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="1-全局命名空间"><a href="#1-全局命名空间" class="headerlink" title="1.全局命名空间"></a>1.全局命名空间</h3><p>全局作用域中定义的名字（即在所有类、函数以及命名空间之外定义的名字）也就是定义在全局命名空间<code>global namespace</code>中。全局作用域是隐式的，所以它并没有名字，下面的形式表示全局命名空间中一个成员：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">::member_name</span><br></pre></td></tr></table></figure><h3 id="2-嵌套的命名空间"><a href="#2-嵌套的命名空间" class="headerlink" title="2.嵌套的命名空间"></a>2.嵌套的命名空间</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span> foo &#123;</span><br><span class="line">    <span class="keyword">namespace</span> bar &#123;</span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Cat</span> &#123; <span class="comment">/*...*/</span> &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用方式</span></span><br><span class="line">foo::bar::Cat</span><br></pre></td></tr></table></figure><h3 id="3-内联命名空间"><a href="#3-内联命名空间" class="headerlink" title="3.内联命名空间"></a>3.内联命名空间</h3><p>C++11新标准引入了一种新的嵌套命名空间，称为内联命名空间<code>inline namespace</code>。内联命名空间可以被外层命名空间直接使用。定义内联命名空间的方式是在关键字<code>namespace</code>前添加关键字<code>inline</code></p><blockquote><p>第一次声明命名空间时使用了inline关键字，这叫显式内联。由于第一次声明命名空间时使用了<code>inline</code>关键字，后续相同的命名空间不再需要加<code>inline关键字</code>，但是，这里声明的还是内联命名空间，这种情况成为隐式内联</p><p>声明的命名空间同名，它们同属一个命名空间。这是C++命名空间一直都有的特性</p></blockquote><p>使用场景：假设我们队类库进行了升级，同时又希望：</p><ol><li>使用者代码不受影响，除非使用者自己想改</li><li>可以自由使用新类库的功能</li><li>如果有需要仍然可以使用原来的类库</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//探究内联命名空间的用法</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//版本1.0</span></span><br><span class="line"><span class="keyword">namespace</span> inline_test1 &#123;    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">char</span> char_value;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//版本2.0</span></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">namespace</span> inline_test2 &#123;    <span class="comment">//显式内联</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Entity1</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">std::string str_value;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> inline_test2 &#123;           <span class="comment">//隐式内联</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Entity2</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> int_value;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test_inline_namespace</span><span class="params">()</span>       <span class="comment">//使用示范</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//内联命名空间声明之后，就可以在外层命名空间不使用前缀而直接使用它们了</span></span><br><span class="line">    <span class="comment">//版本2.0的使用</span></span><br><span class="line">Entity1 e1;</span><br><span class="line">e1.str_value = <span class="string">&quot;Dylan&quot;</span>;</span><br><span class="line">Entity2 e2;</span><br><span class="line">e2.int_value = <span class="number">20</span>;</span><br><span class="line">    <span class="comment">//使用最新类库的时候，就好像没有定义过命名空间一样。如果实在是需要原来的类库，可以采用通用版本前缀加类名的方式</span></span><br><span class="line">    <span class="comment">//版本1.0的使用</span></span><br><span class="line">inline_test1::Entity e;</span><br><span class="line">e.char_value = <span class="string">&#x27;Y&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">test_inline_namespace</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-未命名的命名空间"><a href="#4-未命名的命名空间" class="headerlink" title="4.未命名的命名空间"></a>4.未命名的命名空间</h3><p>关键字<code>namespace</code>后紧跟花括号括起来的一系列声明语句是未命名的命名空间<code>unnamed namespace</code>。未命名的命名空间中定义的变量具有静态生命周期：它们在第一次使用前被创建，直到程序结束时才销毁。</p><blockquote><p><em>Tips：每个文件定义自己的未命名的命名空间，如果两个文件都含有未命名的命名空间，则这两个空间互相无关。在这两个未命名的命名空间里面可以定义相同的名字，并且这些定义表示的是不同实体。如果一个头文件定义了未命名的命名空间，则该命名空间中定义的名字将在每个包含了该头文件的文件中对应不同实体。</em></p></blockquote><p>和其他命名空间不同，未命名的命名空间仅在特定的文件内部有效，其作用范围不会横跨多个不同的文件。未命名的命名空间中定义的名字的作用域与该命名空间所在的作用域相同，如果未命名的命名空间定义在文件的最外层作用域中，则该命名空间一定要与全局作用域中的名字有所区别：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// i的全局声明</span></span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="comment">// i在未命名的命名空间中的声明</span></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    <span class="type">int</span> i;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 二义性错误: i的定义既出现在全局作用域中, 又出现在未嵌套的未命名的命名空间中</span></span><br><span class="line">i = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><blockquote><p><em>未命名的命名空间取代文件中的静态声明：</em><br><em>在标准C++引入命名空间的概念之前，程序需要将名字声明成<code>static</code>的以使其对于整个文件有效。在文件中进行静态声明的做法是从C语言继承而来的。在C语言中，声明为<code>static</code>的全局实体在其所在的文件外不可见。</em> <em><strong>在文件中进行静态声明的做法已经被C++标准取消了，现在的做法是使用未命名的命名空间。</strong></em></p></blockquote><h2 id="【P62】C-的线程"><a href="#【P62】C-的线程" class="headerlink" title="【P62】C++的线程"></a>【P62】C++的线程</h2><ol><li><p>使用多线程，首先要添加头文件<code>#include &lt;thread&gt;</code>。</p></li><li><p>在<strong>Linux平台</strong>下编译时需要加上**”-lpthread”链接库**</p></li><li><p>创建一个线程对象：**<code>std::thread objName (一个函数指针以及其他可选的任何参数)</code>**</p></li><li><p>等待一个线程完成它的工作的方法 :<code>worker.join()</code></p><blockquote><p><strong>这里的线程名字是worker，换其他的也可以,自己决定的</strong>，调用<code>join()</code>的目的是：<strong>让主线程等待 工作线程 完成它所有的操作后，再继续执行主线程</strong></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;thread&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">bool</span> s_Finished = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">DoWork</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> std::literals::chrono_literals;   <span class="comment">//导入命名空间 std::literals::chrono_literals</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (!s_Finished) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Working...&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        std::this_thread::<span class="built_in">sleep_for</span>(<span class="number">1</span>s);    <span class="comment">//等待一秒</span></span><br><span class="line">        <span class="comment">//std::this_thread可以用来给当前线程下命令</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//DoWork即是我们想要在另一个执行线程中发生的事情</span></span><br><span class="line">    <span class="function">std::thread <span class="title">worker</span><span class="params">(DoWork)</span></span>; <span class="comment">//开启多线程操作，这里传入的是函数指针</span></span><br><span class="line"></span><br><span class="line">    std::cin.<span class="built_in">get</span>();      <span class="comment">//此时worker线程会循环打印，而主线程此时被cin.get()阻塞</span></span><br><span class="line">    s_Finished = <span class="literal">true</span>;   <span class="comment">//让worker线程终止的条件，如果按下回车，则会修改该值，间接影响到worker线程的工作</span></span><br><span class="line"></span><br><span class="line">    worker.<span class="built_in">join</span>();       <span class="comment">//join()：等待工作线程结束后，才会执行接下来的操作</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//std::cout...是join语句的下一行代码，所以在DoWork函数中的所有内容完成前，它都不会运行</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Done&quot;</span> &lt;&lt; std::endl; </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是正常情况，<code>DoWork</code>应该会一直循环下去，但因为这里是多线程，所以可以在另一个线程中修改工作线程的变量，来停止该线程的循环。 <strong>多线程对于加速程序是十分有用的，线程的主要目的就是优化</strong></p></li></ol><h2 id="【P63】C-的计时"><a href="#【P63】C-的计时" class="headerlink" title="【P63】C++的计时"></a>【P63】C++的计时</h2><h3 id="1-使用chrono库"><a href="#1-使用chrono库" class="headerlink" title="1.使用chrono库"></a>1.使用chrono库</h3><p><strong>介绍：</strong>在C++11中，是标准模板库中与时间有关的头文件。该头文件中所有函数与类模板均定义在<code>std::chrono</code>命名空间中</p><blockquote><p>计时的使用很重要。在逐渐开始集成更多复杂的特性时，如果想编写性能良好的代码，需要用到计时来看到差异。计时有两种选择，一种是用平台特定的API，另一种是利用chrono库计时，此处推荐后者</p></blockquote><p>在使用上，一个比较好的方法是自定义一个Timer类，在其构造函数里面记下开始时刻，在其析构函数里面记下结束时刻，并打印从构造到析构所用的时间。如此就可以用这样一个类来对一个作用域进行计时</p><p>获得当前时间：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">std::chrono::time_point&lt;std::chrono::steady_clock&gt; start = std::chrono::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line">std::chrono::time_point&lt;std::chrono::steady_clock&gt; end = std::chrono::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line"><span class="comment">//或者，使用auto关键字</span></span><br><span class="line"><span class="keyword">auto</span>  start = std::chrono::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line"><span class="keyword">auto</span>  end = std::chrono::high_resolution_clock::<span class="built_in">now</span>();</span><br></pre></td></tr></table></figure><p>获得时间差：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">std::chrono::duration&lt;<span class="type">float</span>&gt; duration = end - start;</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="keyword">auto</span> duration = end - start;</span><br></pre></td></tr></table></figure><blockquote><p>注意：在<strong>自定义计时器类的构造函数、析构函数</strong>中，<strong>不要使用auto关键字</strong>，应该在计时器类的构造函数、析构函数<strong>前</strong>定义start、end、duration变量</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Timer</span> &#123;</span><br><span class="line">std::chrono::time_point&lt;std::chrono::steady_clock&gt; start, end;</span><br><span class="line">std::chrono::duration&lt;<span class="type">float</span>&gt; duration;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Timer</span>()</span><br><span class="line">&#123;</span><br><span class="line">start = std::chrono::high_resolution_clock::<span class="built_in">now</span>();      <span class="comment">//获取运行开始的时间</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Timer</span>()</span><br><span class="line">&#123;</span><br><span class="line">end = std::chrono::high_resolution_clock::<span class="built_in">now</span>();        <span class="comment">//获取运行结束的时间</span></span><br><span class="line">duration = end - start;            <span class="comment">//获取运行时间</span></span><br><span class="line"></span><br><span class="line"><span class="type">float</span> ms = duration.<span class="built_in">count</span>() * <span class="number">1000.0f</span>;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Timer took &quot;</span> &lt;&lt; ms &lt;&lt; <span class="string">&quot;ms&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="comment">//也可利用duration_cast进行时间转换</span></span><br><span class="line"><span class="comment">//std::chrono::milliseconds ms = std::chrono::duration_cast&lt;std::chrono::milliseconds&gt;(duration);</span></span><br><span class="line"><span class="comment">//std::cout &lt;&lt; &quot;Timer took &quot; &lt;&lt; ms.count() &lt;&lt; &quot;ms&quot; &lt;&lt; std::endl;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Function</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Timer timer;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;hello world!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">Function</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-关于类模板std-chrono-time-point和duration-cast函数"><a href="#2-关于类模板std-chrono-time-point和duration-cast函数" class="headerlink" title="2.关于类模板std::chrono::time_point和duration_cast函数"></a>2.关于类模板std::chrono::time_point和duration_cast函数</h3><p><strong>时间点：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">Clock</span>, <span class="keyword">class</span> <span class="title class_">Duration</span> = <span class="keyword">typename</span> Clock::duration&gt; <span class="keyword">class</span> time_point;</span><br></pre></td></tr></table></figure><p>类模板 <code>std::chrono::time_point</code> 表示时间中的一个点。它被实现成如同存储一个 <code>Duration</code> 类型的自 <code>Clock</code> 的纪元起始开始的时间间隔的值</p><p><code>Clock</code> 必须满足<a href="https://www.apiref.com/cpp-zh/cpp/named_req/Clock.html"><em>时钟</em> <em>(Clock)</em> </a>的要求或为 std::chrono::local_t (C++20 起)</p><p>第一个模板参数Clock用来指定所要使用的时钟,在标准库中有三种时钟，分别为：</p><ul><li>system_clock：当前系统范围(即对各进程都一致)的一个实时的日历时钟(wallclock)</li><li>steady_clock：当前系统实现的一个维定时钟，该时钟的每个时间嘀嗒单位是均匀的(即长度相等)。</li><li>high_resolution_clock：当前系统实现的一个高分辨率时钟。</li></ul><p>第二个模板参数用来表示时间的计量单位(特化的std::chrono::duration&lt;&gt; )</p><p>时间点都有一个时间戳，即时间原点。chrono库中采用的是Unix的时间戳1970年1月1日 00:00。所以time_point也就是距离时间戳(epoch)的时间长度（duration）</p><hr><p><strong>duration_cast</strong></p><p>duration_cast()用于将时间间隔从一种表示方式转换为另一种表示方式（即在不同的时间单位之间进行转换）</p><p>使用案例如下：</p><p>小时转换为分钟&#x2F;秒&#x2F;毫秒&#x2F;微秒</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::chrono::hours h = std::chrono::<span class="built_in">hours</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">std::chrono::minutes m = std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::minutes&gt;(h);</span><br><span class="line"></span><br><span class="line">std::chrono::seconds s = std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::seconds&gt;(h);</span><br><span class="line"></span><br><span class="line">std::chrono::milliseconds ms = std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::milliseconds&gt;(h);</span><br><span class="line"></span><br><span class="line">std::chrono::microseconds μs = std::chrono::<span class="built_in">duration_cast</span>&lt;std::chrono::microseconds&gt;(h);</span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;1小时可转换为 \n&quot;</span></span><br><span class="line">&lt;&lt; m.<span class="built_in">count</span>() &lt;&lt; <span class="string">&quot;分钟 \n&quot;</span></span><br><span class="line">&lt;&lt; s.<span class="built_in">count</span>() &lt;&lt; <span class="string">&quot;秒 \n&quot;</span></span><br><span class="line">&lt;&lt; ms.<span class="built_in">count</span>() &lt;&lt; <span class="string">&quot;毫秒 \n&quot;</span></span><br><span class="line">&lt;&lt; μs.<span class="built_in">count</span>() &lt;&lt; <span class="string">&quot;微秒&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考文档：<a href="https://www.apiref.com/cpp-zh/cpp/header/chrono.html">标准库头文件  - C++中文 - API参考文档 (apiref.com)</a></p><p>英文版：<a href="https://en.cppreference.com/w/cpp/chrono">Date and time utilities - cppreference.com</a></p><h2 id="【P65】C-的排序"><a href="#【P65】C-的排序" class="headerlink" title="【P65】C++的排序"></a>【P65】C++的排序</h2><ol><li><p>原型：<code>std::sort( vec.begin(), vec.end(), cmp)</code></p><p>cmp参数为排序准则，可以设置排序的规则。传入的函数可以是bool类型的内置函数，也可以是lambda表达式</p></li><li><p><strong>默认</strong>是从小到大排序</p></li></ol><p>使用内置函数，添加头文件functional，使用<code>std::greater&lt;&gt;()</code>函数，则会按照从大到小顺序排列：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt;  values = &#123;<span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>&#125;;             </span><br><span class="line">    std::<span class="built_in">sort</span>(values.<span class="built_in">begin</span>(), values.<span class="built_in">end</span>(), std::<span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;()); </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> value : values)</span><br><span class="line">    std::cout &lt;&lt; value &lt;&lt; std::endl; <span class="comment">// 5 4 3 2 1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 lambda 进行灵活排序：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">std::<span class="built_in">sort</span>(values.<span class="built_in">begin</span>(), values.<span class="built_in">end</span>(), [](<span class="type">int</span> a, <span class="type">int</span> b)</span><br><span class="line">    &#123;</span><br><span class="line">            <span class="keyword">return</span> a &lt; b;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><blockquote><p>对于已定的传入参数的顺序<code>[](int a, int b)</code>，如果要将参数a排在b前面，则返回true，如果将参数a排在b后面则返回false</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//a &lt; b 若返回true，a排在前面。此时为升序排列（如果a小于b，那么a就排在b的前面）</span></span><br><span class="line"><span class="comment">//a &gt; b 若返回true，a排在前面。此时为降序排列（如果a大于b，那么a就排在b的前面）</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;functional&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::vector&lt;<span class="type">int</span>&gt;  values = &#123;<span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>&#125;;          </span><br><span class="line"></span><br><span class="line">    std::<span class="built_in">sort</span>(values.<span class="built_in">begin</span>(), values.<span class="built_in">end</span>(), [](<span class="type">int</span> a, <span class="type">int</span> b)</span><br><span class="line">    &#123;</span><br><span class="line">            <span class="keyword">return</span> a &lt; b;  <span class="comment">// 如果a小于b，那么a就排在b的前面。 1 2 3 4 5</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> value : values)</span><br><span class="line">    std::cout &lt;&lt; value &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="【P67】C-的联合体"><a href="#【P67】C-的联合体" class="headerlink" title="【P67】C++的联合体"></a>【P67】C++的联合体</h2><ol><li><code>union &#123; &#125;;</code>，注意结尾有<strong>分号</strong>。</li><li>通常union是匿名使用的，但是匿名union不能含有成员函数</li><li>在可以使用<strong>类型双关</strong>的时候，通过使用union实现的可读性更强 </li><li>union的特点是<strong>共用内存</strong> 。可以像使用结构体或者类一样使用它们，也可以给它添加静态函数或者普通函数、方法等待。然而<strong>不能使用虚方法</strong>，除此之外还有其他一些限制</li></ol><p>使用案例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Vector2</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> A, B;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Vector4</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">union</span> <span class="comment">// 不写名称，作为匿名使用</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">struct</span>      <span class="comment">//第一个Union成员</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">float</span> x, y, z, w;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">struct</span>      <span class="comment">//第二个Union成员，与第一个成员共享内存</span></span><br><span class="line">        &#123;</span><br><span class="line">            Vector2 a, b;      <span class="comment">//a和x，y的内存共享，b和z，w的内存共享</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintVector2</span><span class="params">(<span class="type">const</span> Vector2&amp; vector)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; vector.A &lt;&lt; <span class="string">&quot;, &quot;</span> &lt;&lt; vector.B &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Vector4 vector = &#123; <span class="number">1.0f</span>, <span class="number">2.0f</span>, <span class="number">3.0f</span>, <span class="number">4.0f</span> &#125;;</span><br><span class="line">    <span class="built_in">PrintVector2</span>(vector.a);</span><br><span class="line">    <span class="built_in">PrintVector2</span>(vector.b);</span><br><span class="line">    vector.z = <span class="number">500</span>;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;-----------------------&quot;</span> &lt;&lt; std::endl;      <span class="comment">//分割线</span></span><br><span class="line">    <span class="built_in">PrintVector2</span>(vector.a);</span><br><span class="line">    <span class="built_in">PrintVector2</span>(vector.b);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：</p><blockquote><p>1，2</p><p>3，4</p><p>-———————-</p><p>1，2<br>500，4</p></blockquote><p><strong>引自b站评论：</strong>union里的成员会共享内存，分配的大小是按最大成员的sizeof，视频里举的例子有两个成员，也就是那两个匿名的结构体，改变其中一个结构体里的变量，在另外一个结构体里面与之共享内存的变量也会改变。如果这两个成员是结构体<code>struct&#123; int a,b&#125; ;</code>和<code>int k</code>, 如果<code>k=2; </code>相对应的<code>a=2</code>，而b不变。union我觉得在这种情况下很好用，就是用不同的结构表示同样的数据 ，那么你可以按照获取和修改他们的方式来定义你的 union结构 很方便</p><h2 id="【P68】C-的虚析构函数"><a href="#【P68】C-的虚析构函数" class="headerlink" title="【P68】C++的虚析构函数"></a>【P68】C++的虚析构函数</h2><ol><li><p>如果用基类指针来引用派生类对象，那么基类的析构函数必须标记为<strong>virtual</strong>，否则 C++ 只会调用基类的析构函数，不会调用派生类的析构函数</p></li><li><p>继承时，要养成的一个好习惯就是，<strong>基类析构函数中，加上virtual</strong></p><blockquote><p>为什么要调用派生类析构函数？<br>若派生类有一个成员int数组要在堆上分配内存，且是在构造函数中分配，在析构函数中释放内存，那么在运行该代码时，我们调用了派生类构造函数来分配一些内存，却无法调用派生类析构函数的<code>delete</code>释放该内存的话，就会导致<strong>内存泄漏</strong></p></blockquote></li></ol><p>代码案例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Base</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Base</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;Base Constructor\n&quot;</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">Base</span>() &#123; std::cout &lt;&lt; <span class="string">&quot;Base Destructor\n&quot;</span>; &#125;      <span class="comment">//标记为virtual</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Derived</span> : <span class="keyword">public</span> Base</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Derived</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        m_Array = <span class="keyword">new</span> <span class="type">int</span>[<span class="number">5</span>];</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Derived Constructor\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~<span class="built_in">Derived</span>()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">delete</span>[] m_Array;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;Derived Destructor\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">int</span>* m_Array;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Base* base = <span class="keyword">new</span> <span class="built_in">Base</span>();</span><br><span class="line">    <span class="keyword">delete</span> base;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;-----------------&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    Derived* derived = <span class="keyword">new</span> <span class="built_in">Derived</span>();</span><br><span class="line">    <span class="keyword">delete</span> derived;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;-----------------&quot;</span> &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    Base* poly = <span class="keyword">new</span> <span class="built_in">Derived</span>();</span><br><span class="line">    <span class="keyword">delete</span> poly;       <span class="comment">//基类析构函数中如果不加virtual，则此处会造成内存泄漏</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="【P72】C-的预编译头文件-PCH"><a href="#【P72】C-的预编译头文件-PCH" class="headerlink" title="【P72】C++的预编译头文件(PCH)"></a>【P72】C++的预编译头文件(PCH)</h2><p>预编译头文件（PCH）是一种用来加速编译过程的技术。一个项目中有多个C++文件并且每个文件又包含多个头文件，考虑到每次对C++文件进行修改，整个文件都需要重新编译，所以通常会使用预编译头文件来避免头文件的重复预处理。</p><h3 id="1-原理"><a href="#1-原理" class="headerlink" title="1.原理"></a>1.原理</h3><p>它可以先将一些经常被用到的头文件进行预处理且只进行一次，然后生成一个二进制文件。在编译其他源文件时，便可以直接引用这个二进制文件，而不需要再次解析和处理这些头文件，避免了重复的预处理过程，从而提高了编译速度</p><h3 id="2-使用限制"><a href="#2-使用限制" class="headerlink" title="2.使用限制"></a>2.使用限制</h3><p>预编译头文件中的内容最好都是不需要反复修改更新的东西，每修改一次，预编译头文件都要重新编译一次，会导致编译速度降低。像C++标准库、windows的API这种不会大改的文件可以放到预编译头文件中，可以节省编译时间</p><h3 id="3-缺点"><a href="#3-缺点" class="headerlink" title="3.缺点"></a>3.缺点</h3><p>预编译头文件的使用会隐藏掉这个cpp文件的依赖。比如在一个cpp文件中<code>#include &lt;vector&gt;</code>，就清楚地知道这个cpp文件中需要vector的依赖，而如果放到预编译头文件中，就会将该信息隐藏</p><h3 id="4-实现"><a href="#4-实现" class="headerlink" title="4.实现"></a>4.实现</h3><p>创建预编译头文件：开发者需要先创建一个预编译头文件，该文件通常包含项目中的常用头文件。这个预编译头文件可以是一个单独的文件，也可以是一个包含多个头文件的文件</p><p>例子如下：</p><p>pch.h文件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// C++ structures</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;utility&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Data structures</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// windows API</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br></pre></td></tr></table></figure><p>pch.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;pch.h&quot;</span></span></span><br></pre></td></tr></table></figure><p>Main.cpp</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;hello world&quot;</span>&lt;&lt;std::endl;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>右键打开pch.cpp文件的属性页并如图进行修改</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/ChernoC++/p72%E9%A2%84%E5%A4%84%E7%90%86%E5%A4%B4%E6%96%87%E4%BB%B6/%E9%A2%84%E5%A4%84%E7%90%86%E5%A4%B4%E6%96%87%E4%BB%B61.jpg"></p><p>打开项目的属性页并如图进行修改</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/ChernoC++/p72%E9%A2%84%E5%A4%84%E7%90%86%E5%A4%B4%E6%96%87%E4%BB%B6/%E9%A2%84%E5%A4%84%E7%90%86%E5%A4%B4%E6%96%87%E4%BB%B62.jpg"></p><p>然后右键项目选择生成</p><p>对比：</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/ChernoC++/p72%E9%A2%84%E5%A4%84%E7%90%86%E5%A4%B4%E6%96%87%E4%BB%B6/%E6%9C%AA%E9%A2%84%E5%A4%84%E7%90%86%E5%89%8D%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%94%9F%E6%88%90.jpg" alt="未预处理时第一次生成：2051ms"></p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/ChernoC++/p72%E9%A2%84%E5%A4%84%E7%90%86%E5%A4%B4%E6%96%87%E4%BB%B6/%E6%9C%AA%E9%A2%84%E5%A4%84%E7%90%86%E5%89%8D%E7%AC%AC%E4%BA%8C%E6%AC%A1%E7%94%9F%E6%88%90.jpg" alt="未预处理时第二次生成:1101ms"></p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/ChernoC++/p72%E9%A2%84%E5%A4%84%E7%90%86%E5%A4%B4%E6%96%87%E4%BB%B6/%E9%A2%84%E5%A4%84%E7%90%86%E5%90%8E%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%94%9F%E6%88%90.jpg" alt="预处理后第一次生成：1147ms"></p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/ChernoC++/p72%E9%A2%84%E5%A4%84%E7%90%86%E5%A4%B4%E6%96%87%E4%BB%B6/%E9%A2%84%E5%A4%84%E7%90%86%E5%90%8E%E7%AC%AC%E4%BA%8C%E6%AC%A1%E7%94%9F%E6%88%90.jpg" alt="预处理后第二次生成：371ms"></p><h2 id="【P73】C-的dynamic-cast"><a href="#【P73】C-的dynamic-cast" class="headerlink" title="【P73】C++的dynamic_cast"></a>【P73】C++的dynamic_cast</h2><ol><li><p>dynamic_cast可以在继承体系里面向上、向下或者平级进行类型转换，常用于将基类的指针或引用安全地转换成派生类的指针或引用</p></li><li><p><strong>使用时需要保证是多态，即基类里面含有虚函数</strong></p></li><li><p>由于dynamic_cast使用了RTTI（运行时类型识别），所以会对性能增加负担</p></li><li><p>如果一条dynamic_cast语句的转换目标是<strong>指针类型</strong>并且<strong>失败</strong>了，则<strong>返回NULL</strong></p></li></ol><hr><p>Tip：支持<strong>运行时类型识别(run-time type identification,RTTI)<strong>。dynamic_cast主要还是用于执行“安全的向下转型，至于“向上转型”（即派生类指针或引用类型转换为其基类类型），本身就是安全的，尽管可以使用dynamic_cast进行转换，但这是没必要的， 普通的转换已经可以达到目的，</strong>毕竟使用dynamic_cast是需要开销的</strong></p><p>适用情况：我们想使用基类对象的指针或引用执行某个派生类操作并且该操作不是虚函数。一般来说，只要有可能我们应该尽量使用虚函数，使用RTTI有潜在风险，程序员必须清楚知道转换的目标类型并且必须检查类型转换是否被成功执行</p><hr><p>代码案例</p><p>注：使用dynamic_cast就必须在编译器中启动RTTI，即“运行时期类型识别”。默认情况下编译器是不启动RTTI的。凡是程序中用到了RTTI（比如typeid）都要在编译器中打开RTTI，这样才能正确编译</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Entity</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="type">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Player</span> : <span class="keyword">public</span> Entity</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Enemy</span> : <span class="keyword">public</span> Entity</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Player* player = <span class="keyword">new</span> <span class="built_in">Player</span>();</span><br><span class="line">Entity* entity = <span class="keyword">new</span> <span class="built_in">Entity</span>();</span><br><span class="line">Entity* p1 = <span class="keyword">new</span> <span class="built_in">Player</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//旧式转换</span></span><br><span class="line">Entity* playerToEntity1 = player;                <span class="comment">//从下往上，隐式，安全</span></span><br><span class="line">Player* entityToPlayer1 = (Player*)entity;       <span class="comment">//从上往下，显式，危险</span></span><br><span class="line">Enemy* playerToEnemy1 = (Enemy*)player;          <span class="comment">//平级转换，显示，危险</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//当Enemy有的函数，Player也有的话，运行该函数它可能没有问题</span></span><br><span class="line"><span class="comment">//若访问特定的成员，只有Player有，而Enemy没有，程序则可能崩溃或出现意想不到的情况</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//dynamic_cast</span></span><br><span class="line">Entity* playerToEntity2 = <span class="built_in">dynamic_cast</span>&lt;Entity*&gt;(player);    <span class="comment">//从下往上，安全</span></span><br><span class="line">Player* entityToPlayer2 = <span class="built_in">dynamic_cast</span>&lt;Player*&gt;(entity);    <span class="comment">//从上往下，返回NULL</span></span><br><span class="line"><span class="keyword">if</span> (entityToPlayer2) &#123; std::cout &lt;&lt; <span class="string">&quot;转换成功&quot;</span> &lt;&lt; std::endl; &#125;    <span class="comment">//判断是否转换成功</span></span><br><span class="line"></span><br><span class="line">Enemy* playerToEnemy2 = <span class="built_in">dynamic_cast</span>&lt;Enemy*&gt;(player);     <span class="comment">//平级转换，返回NULL</span></span><br><span class="line">Player* p2 = <span class="built_in">dynamic_cast</span>&lt;Player*&gt;(p1);                   <span class="comment">//虽然是从上往下，但是实际对象是player，所以成功转换</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="【P74】C-的基准测试"><a href="#【P74】C-的基准测试" class="headerlink" title="【P74】C++的基准测试"></a>【P74】C++的基准测试</h2><p>写一个计时器对代码测试性能。<strong>在release模式</strong>下去测试，这样更有实际意义 </p><p>该部分内容同P63涉及的知识点一致，所以这里直接上代码案例</p><p>代码案例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Timer</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="built_in">Timer</span>()</span><br><span class="line">&#123;</span><br><span class="line">startTimePoint = std::chrono::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~<span class="built_in">Timer</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">Stop</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Stop</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> endTimePoint = std::chrono::high_resolution_clock::<span class="built_in">now</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> start = std::chrono::<span class="built_in">time_point_cast</span>&lt;std::chrono::microseconds&gt;(startTimePoint).<span class="built_in">time_since_epoch</span>().<span class="built_in">count</span>();</span><br><span class="line"><span class="keyword">auto</span> end = std::chrono::<span class="built_in">time_point_cast</span>&lt;std::chrono::microseconds&gt;(endTimePoint).<span class="built_in">time_since_epoch</span>().<span class="built_in">count</span>();</span><br><span class="line"><span class="comment">//time_point_cast可以将 std::chrono::time_point 进行精度转换</span></span><br><span class="line"><span class="comment">//time_since_epoch() 用于获取当前时间点距离时间戳(1970年1月1日00:00)的时间长度，返回值类型为duration</span></span><br><span class="line"><span class="comment">//转换到正确的时间，然后计数（count）</span></span><br><span class="line"><span class="comment">//返回值类型(start和end的类型)为long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> duration = end - start;</span><br><span class="line"><span class="type">double</span> ms = duration * <span class="number">0.001</span>;    <span class="comment">//转换为毫秒数</span></span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Timer took &quot;</span> &lt;&lt; duration &lt;&lt; <span class="string">&quot;μs(&quot;</span> &lt;&lt; ms &lt;&lt; <span class="string">&quot;ms)&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">std::chrono::time_point&lt;std::chrono::high_resolution_clock&gt; startTimePoint;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//测试shared_ptr和unique_ptr的性能对比</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Vector2</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">float</span> x, y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//shared_ptr第一种情况</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Make Shared\n&quot;</span>;</span><br><span class="line">&#123;</span><br><span class="line">std::array&lt;std::shared_ptr&lt;Vector2&gt;, <span class="number">1000</span>&gt; sharedPtrs;</span><br><span class="line">Timer timer;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; sharedPtrs.<span class="built_in">size</span>(); i++)</span><br><span class="line">sharedPtrs[i] = std::<span class="built_in">make_shared</span>&lt;Vector2&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//shared_ptr第二种情况</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;New Shared\n&quot;</span>;</span><br><span class="line">&#123;</span><br><span class="line">std::array&lt;std::shared_ptr&lt;Vector2&gt;, <span class="number">1000</span>&gt; sharedPtrs;</span><br><span class="line">Timer timer;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; sharedPtrs.<span class="built_in">size</span>(); i++)</span><br><span class="line">sharedPtrs[i] = std::<span class="built_in">shared_ptr</span>&lt;Vector2&gt;(<span class="keyword">new</span> <span class="built_in">Vector2</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//unique_ptr</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Make Unique\n&quot;</span>;</span><br><span class="line">&#123;</span><br><span class="line">std::array&lt;std::unique_ptr&lt;Vector2&gt;, <span class="number">1000</span>&gt; uniquePtrs;</span><br><span class="line">Timer timer;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; uniquePtrs.<span class="built_in">size</span>(); i++)</span><br><span class="line">uniquePtrs[i] = std::<span class="built_in">make_unique</span>&lt;Vector2&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__debugbreak();       <span class="comment">//设置断点（这是属于VS的一个设置断点函数）</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="【P75】C-的结构化绑定"><a href="#【P75】C-的结构化绑定" class="headerlink" title="【P75】C++的结构化绑定"></a>【P75】C++的结构化绑定</h2><p>结构化绑定structured binding是C++17的新特性，能让我们更好地处理多返回值。可以在将函数返回为tuple、pair、struct等结构体且赋值给另外的变量的时候，<strong>直接得到成员</strong>，而不是结构体</p><blockquote><p>在P52有涉及到如何处理多返回值，当时是用结构体去处理，而这个结构化绑定就是在这个的基础上拓展的一种新方法，特别是处理元组（tuple），对组（pair）以及返回诸如此类的结构体</p></blockquote><p>注：确保在项目属性-C&#x2F;C++-语言-C++语言标准里面选择<strong>C++17或者C++20</strong></p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/ChernoC++/%E5%9B%BE%E7%89%87%E8%AF%B4%E6%98%8E/P74C++%E7%9A%84%E7%BB%93%E6%9E%84%E5%8C%96%E7%BB%91%E5%AE%9A.jpg" alt="选择C++17或者C++20"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;tuple&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可换成pair或者struct结构</span></span><br><span class="line"><span class="function">std::tuple&lt;std::string, <span class="type">int</span>&gt; <span class="title">CreatePerson</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> &#123; <span class="string">&quot;Dylan&quot;</span>, <span class="number">20</span> &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">auto</span> [name, age] = <span class="built_in">CreatePerson</span>();</span><br><span class="line">std::cout &lt;&lt; name &lt;&lt; <span class="string">&#x27;:&#x27;</span> &lt;&lt; age &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="【P76】如何处理OPTIONAL数据"><a href="#【P76】如何处理OPTIONAL数据" class="headerlink" title="【P76】如何处理OPTIONAL数据"></a>【P76】如何处理OPTIONAL数据</h2><p>在读取文件内容的时候，往往需要判断读取是否成功，常用的方法是传入一个引用变量或者判断返回的<code>std::string</code>是否为空，<strong>C++17</strong>在 STL 中引入了一个更好的方法：<strong>std::optional</strong>，它用来管理一个可选的容纳值（一个可能存在也可能不存在的数据）</p><p>注：确保在项目属性-C&#x2F;C++-语言-C++语言标准里面选择<strong>C++17或者C++20</strong></p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/ChernoC++/%E5%9B%BE%E7%89%87%E8%AF%B4%E6%98%8E/P74C++%E7%9A%84%E7%BB%93%E6%9E%84%E5%8C%96%E7%BB%91%E5%AE%9A.jpg" alt="选择C++17或者C++20"></p><h3 id="1-std-optional"><a href="#1-std-optional" class="headerlink" title="1.std::optional"></a>1.std::optional</h3><p><code>std::optional</code>是一种“<strong>和类型(sum type)<strong>”，也就是说，<code>std::optional</code>类型的变量要么是一个<code>T</code>类型的</strong>变量</strong>，要么是一个表示“什么都没有”的状态</p><h3 id="2-has-value"><a href="#2-has-value" class="headerlink" title="2.has_value()"></a>2.has_value()</h3><p>我们可以通过has_value()来判断对应的optional对像是否处于已经设置值的状态，如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(data.<span class="built_in">has_value</span>()) &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="3-访问optional对象中的数据"><a href="#3-访问optional对象中的数据" class="headerlink" title="3.访问optional对象中的数据"></a>3.访问optional对象中的数据</h3><p>我们可以通过value(), value_or()来获取optional对象中存储的值, **value_or()**可以允许传入一个默认值, 如果optional对象为std::nullopt（无值状态）, 则直接返回传入的默认值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;optional&gt;</span>          <span class="comment">//使用时要包含optional头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line">std::optional&lt;std::string&gt;<span class="built_in">ReadFileAsString</span>(<span class="type">const</span> std::string&amp; filepath)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">std::ifstream <span class="title">stream</span><span class="params">(filepath)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (stream) &#123;</span><br><span class="line"></span><br><span class="line">std::string result;</span><br><span class="line"><span class="comment">//read file</span></span><br><span class="line"><span class="built_in">getline</span>(stream, result);   <span class="comment">//读取文件中的一行数据</span></span><br><span class="line">stream.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//如果文本存在的话，它会返回所有文本的字符串。如果不存在或者不能读取，则返回optional&#123;&#125;</span></span><br><span class="line"><span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::optional&lt;std::string&gt; data = <span class="built_in">ReadFileAsString</span>(<span class="string">&quot;data.txt&quot;</span>);   <span class="comment">//data.txt在项目的目录中存在</span></span><br><span class="line"><span class="comment">// 访问optional对象中的数据还有其他方法</span></span><br><span class="line"><span class="comment">// 1.std::string str = *data;</span></span><br><span class="line"><span class="comment">// 2.std::string value = data.value();</span></span><br><span class="line">std::string value = data.<span class="built_in">value_or</span>(<span class="string">&quot;Not present&quot;</span>);     <span class="comment">//数据若不存在则返回默认值&quot;Not Present&quot;</span></span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; value &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (data) &#123;     <span class="comment">//这里这样写是没问题的，可以不用has_value()，显得更简洁美观</span></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;File is read successfully&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;File could not be opened&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="【P77】单一变量存放多种类型的数据"><a href="#【P77】单一变量存放多种类型的数据" class="headerlink" title="【P77】单一变量存放多种类型的数据"></a>【P77】单一变量存放多种类型的数据</h2><p>类模板 <code>std::variant</code> 表示一个类型安全的<a href="https://www.apiref.com/cpp-zh/cpp/language/union.html">联合体</a>，是<strong>C++17</strong>的新特性，是一种可以容纳多种类型变量的结构体</p><h3 id="1-std-variant"><a href="#1-std-variant" class="headerlink" title="1.std::variant"></a>1.std::variant</h3><p>和optional很像，它的作用是让我们不用担心处理确切的数据类型，且只有一个变量，所以我们需要做的就是定义一个variant对象，然后列出它所有可能的数据类型。</p><blockquote><p>比如在解析一个文件时，我们可能不确定读取的数据是一个字符串还是整数，又或者是在程序运行时接受一个命令行参数，而我们不确定该参数是什么数据类型，这时<code>std::variant</code>允许我们列出所有可能的数据类型，然后再由我们决定是什么数据类型</p></blockquote><h3 id="2-与union的区别"><a href="#2-与union的区别" class="headerlink" title="2.与union的区别"></a>2.与union的区别</h3><p>技术上讲，union更有效率，而<strong>variant</strong>更加<strong>类型安全</strong>，不会造成未定义行为，所以在可以自由使用更多内存的情况下，应当去使用它,除非做的是底层优化，非常需要性能</p><h3 id="3-std-variant的运用"><a href="#3-std-variant的运用" class="headerlink" title="3.std::variant的运用"></a>3.std::variant的运用</h3><ul><li><strong>1）简单运用</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;variant&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::variant&lt;std::string, <span class="type">int</span>&gt; data; <span class="comment">//列举出可能的类型</span></span><br><span class="line"></span><br><span class="line">data = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="comment">// 索引的第一种方式：std::get，但是要与上一次赋值类型相同，不然会报错</span></span><br><span class="line">std::cout &lt;&lt; std::<span class="built_in">get</span>&lt;std::string&gt;(data) &lt;&lt; std::endl;   <span class="comment">//print hello world</span></span><br><span class="line"></span><br><span class="line">data = <span class="number">20</span>;</span><br><span class="line">std::cout &lt;&lt; std::<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;(data) &lt;&lt; std::endl;           <span class="comment">//print 20</span></span><br><span class="line">std::cout &lt;&lt; std::<span class="built_in">get</span>&lt;std::string&gt;(data) &lt;&lt; std::endl;   <span class="comment">//编译通过，但是runtime会报错，显示std::bad_variant_access</span></span><br><span class="line"></span><br><span class="line">data = <span class="literal">false</span>;      <span class="comment">//能编译通过，但不能正常访问</span></span><br><span class="line">std::cout &lt;&lt; std::<span class="built_in">get</span>&lt;<span class="type">bool</span>&gt;(data) &lt;&lt; std::endl;    <span class="comment">//编译失败</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>2）index()索引</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//std::variant的index函数</span></span><br><span class="line">std::variant&lt;std::string, <span class="type">int</span>&gt; data;</span><br><span class="line">data.<span class="built_in">index</span>();  <span class="comment">// 返回一个整数(data当前存储的数据的类型在&lt;&gt;里的序号)，比如返回0代表存的是string, 返回1代表存的是int</span></span><br></pre></td></tr></table></figure><ul><li><strong>3）get_if()</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;variant&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::variant&lt;std::string, <span class="type">int</span>&gt; data;</span><br><span class="line"></span><br><span class="line">data = <span class="string">&quot;Dylan&quot;</span>;</span><br><span class="line">std::cout &lt;&lt; std::<span class="built_in">get</span>&lt;std::string&gt;(data) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">auto</span> value = std::<span class="built_in">get_if</span>&lt;std::string&gt;(&amp;data)) &#123;   <span class="comment">//传入内存地址或指针，返回指针</span></span><br><span class="line"><span class="comment">//此处便可以像平常一样对数据进行处理</span></span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//数据处理</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data = <span class="number">2</span>;</span><br><span class="line">std::cout &lt;&lt; std::<span class="built_in">get</span>&lt;<span class="type">int</span>&gt;(data) &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>4）std::variant和std::optional</strong></p><p><code>std::optional</code>能允许我们有一些不存在的数据，但当我们需要知道程序哪里出现问题，而不仅仅只是知道数据不存在的时候，我们便选择<code>std::variant</code>，例子如下:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果我们成功获取数据，则用字符串作为值，否则设置一些错误编码，以此作为返回值</span></span><br><span class="line"><span class="keyword">enum class</span> <span class="title class_">ErrorCode</span> &#123;</span><br><span class="line">None = <span class="number">0</span>,         <span class="comment">//代表空数据</span></span><br><span class="line">NotFound = <span class="number">1</span>,     <span class="comment">//代表无法查到</span></span><br><span class="line">NoAccess = <span class="number">2</span>      <span class="comment">//代表数据受保护</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::variant&lt;std::string, ErrorCode&gt;<span class="built_in">ReadFileAsString</span>()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这样处理便可以让我们知道哪里出问题和出现什么问题，并进行处理</span></span><br></pre></td></tr></table></figure><h2 id="【P80】如何让C-字符串更快"><a href="#【P80】如何让C-字符串更快" class="headerlink" title="【P80】如何让C++字符串更快"></a>【P80】如何让C++字符串更快</h2><p>内存分配建议：能分配在栈上就别分配到堆上，因为把内存分配到堆上会降低程序的速度 </p><p>string的常用优化：<strong>SSO</strong>(短字符串优化)、<strong>COW</strong>（写时复制技术优化）</p><h3 id="1-为何优化字符串"><a href="#1-为何优化字符串" class="headerlink" title="1.为何优化字符串"></a>1.为何优化字符串</h3><ul><li><p>1）<code>std::string</code>和它的很多函数都喜欢分配在堆上，这实际上并不理想 。</p></li><li><p>2）一般处理字符串时，比如使用<code>substr()</code>切割字符串，这个函数会自己处理完原字符串后<strong>创建出</strong>一个全新的字符串，它可以变换并有自己的内存（new,堆上创建）。 </p></li><li><p>3）在数据传递中减少拷贝是提高性能的最常用办法。在C中指针是完成这一目的的标准数据结构，而在C++中引入了安全性更高的引用类型，所以在C++中若传递的数据仅仅可读，<code>const string&amp;</code>便成了C++合适的方式。但这并非完美，从实践上来看，它至少有以下几方面问题：</p></li></ul><blockquote><p><strong>字符串字面值、字符数组、字符串指针的传递依然要数据拷贝</strong></p><p>这三类低级数据类型与string类型不同，传入时编译器要做<strong>隐式转换</strong>，即需要拷贝这些数据生成string临时对象。<code>const string&amp;</code>指向的实际上是这个临时对象。通常字符串字面值较小，性能损失可以忽略不计；但字符串指针和字符数组某些情况下可能会比较大（比如读取文件的内容），此时会引起频繁的内存分配和数据拷贝，影响程序性能</p><p><strong>substr()</strong> </p><p><code>substr()</code>是个常用的函数，美中不足的时每次都要返回一个新生成的子串，很容易引起性能热点。实际上我们本意不是要改变原字符串，为什么不在原字符串基础上返回呢？</p></blockquote><p>使用<code>substr()</code>的代码案例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">uint32_t</span> s_AllocCount = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//一种调试在heap上分配内存的方法，自己重写一个new的方法，然后设置断点或者打出log，就可以知道每次分配了多少内存，以及分配了几次</span></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">s_AllocCount++;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Allocating &quot;</span> &lt;&lt; size &lt;&lt; <span class="string">&quot; bytes\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">malloc</span>(size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintName</span><span class="params">(<span class="type">const</span> std::string&amp; name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; name &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::string name = <span class="string">&quot;Yan Chernikov&quot;</span>;               <span class="comment">//s_AllocCount + 1</span></span><br><span class="line"></span><br><span class="line">std::string firstName = name.<span class="built_in">substr</span>(<span class="number">0</span>, <span class="number">3</span>);        <span class="comment">//s_AllocCount + 1</span></span><br><span class="line">std::string lastName = name.<span class="built_in">substr</span>(<span class="number">4</span>, <span class="number">8</span>);         <span class="comment">//s_AllocCount + 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">PrintName</span>(firstName);                             </span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; s_AllocCount &lt;&lt; <span class="string">&quot; allocations\n&quot;</span>;</span><br><span class="line">std::cin.<span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><blockquote><p>Allocating 8 bytes<br>Allocating 8 bytes<br>Allocating 8 bytes<br>Yan<br>3 allocations</p></blockquote><h3 id="2-通过string-view优化字符串"><a href="#2-通过string-view优化字符串" class="headerlink" title="2.通过string_view优化字符串"></a>2.通过string_view优化字符串</h3><p><strong>介绍：</strong> <code>std::string_view</code>是C++ 17标准中新加入的类，正如其名，它<strong>提供一个字符串的视图</strong>，即可以通过这个类以各种方法“观测”字符串，但不允许修改字符串。由于它只读的特性，它并不真正持有这个字符串的拷贝，而是与相对应的字符串共享这一空间。即——<strong>构造时不发生字符串的复制</strong>。同时，你也<strong>可以自由地移动这个视图</strong>，<strong>移动视图并不会移动原定的字符串</strong>。<br>通过调用 string_view构造器可将<code>std::string</code>转换为<code>std::string_view</code>对象</p><p>Tip：想了解更多关于C&#x2F;C++的预处理请点击<a href="https://zhuanlan.zhihu.com/p/106545689">关于C&#x2F;C++中的预处理 - 知乎 (zhihu.com)</a></p><p>代码案例：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">uint32_t</span> s_AllocCount = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//一种调试在heap上分配内存的方法，自己重写一个new的方法，然后设置断点或者打出log，就可以知道每次分配了多少内存，以及分配了几次</span></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">s_AllocCount++;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Allocating &quot;</span> &lt;&lt; size &lt;&lt; <span class="string">&quot; bytes\n&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">malloc</span>(size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STRING_VIEW 1         </span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> STRING_VIEW     <span class="comment">// #if判断某个宏是否被定义, 若已定义, 执行随后的语句</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintName</span><span class="params">(std::string_view name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; name &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span>               <span class="comment">// #else与#if, #ifdef, #ifndef对应, 若这些条件不满足, 则执行#else之后的语句, 相当于C语法中的else</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">PrintName</span><span class="params">(<span class="type">const</span> std::string&amp; name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::cout &lt;&lt; name &lt;&lt; std::endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span>              <span class="comment">// #endif#if, #ifdef, #ifndef这些条件命令的结束标志</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::string name = <span class="string">&quot;Yan Chernikov&quot;</span>;                </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> STRING_VIEW</span></span><br><span class="line"><span class="function">std::string_view <span class="title">firstName</span><span class="params">(name.c_str(), <span class="number">3</span>)</span></span>;</span><br><span class="line"><span class="function">std::string_view <span class="title">lastName</span><span class="params">(name.c_str() + <span class="number">4</span>, <span class="number">9</span>)</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">std::string firstName = name.<span class="built_in">substr</span>(<span class="number">0</span>, <span class="number">3</span>);          </span><br><span class="line">std::string lastName = name.<span class="built_in">substr</span>(<span class="number">4</span>, <span class="number">8</span>);           </span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">PrintName</span>(<span class="string">&quot;Dylan&quot;</span>);</span><br><span class="line"><span class="built_in">PrintName</span>(firstName);      </span><br><span class="line"><span class="built_in">PrintName</span>(lastName);</span><br><span class="line">std::cout &lt;&lt; s_AllocCount &lt;&lt; <span class="string">&quot; allocations\n&quot;</span>;</span><br><span class="line">std::cin.<span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><blockquote><p>&#x2F;&#x2F;有#define STRING_VIEW 1</p><p>Allocating 8 bytes<br>Dylan<br>Yan<br>Chernikov<br>1 allocations</p><p>&#x2F;&#x2F;无#define STRING_VIEW 1</p><p>Allocating 8 bytes<br>Allocating 8 bytes<br>Allocating 8 bytes<br>Allocating 8 bytes<br>Dylan<br>Yan<br>Cherniko<br>4 allocations</p></blockquote><p>可见，使用string_view减少了内存在堆上的分配</p><p><strong>进一步优化：使用C风格字符串</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">const</span> <span class="type">char</span>* name = <span class="string">&quot;Yan Chernikov&quot;</span>;                <span class="comment">//c-like编码风格</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> STRING_VIEW</span></span><br><span class="line"><span class="function">std::string_view <span class="title">firstName</span><span class="params">(name, <span class="number">3</span>)</span></span>;</span><br><span class="line"><span class="function">std::string_view <span class="title">lastName</span><span class="params">(name + <span class="number">4</span>, <span class="number">9</span>)</span></span>;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">std::string firstName = name.<span class="built_in">substr</span>(<span class="number">0</span>, <span class="number">3</span>);        <span class="comment">//s_AllocCount + 1  </span></span><br><span class="line">std::string lastName = name.<span class="built_in">substr</span>(<span class="number">4</span>, <span class="number">8</span>);         <span class="comment">//s_AllocCount + 1  </span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">PrintName</span>(<span class="string">&quot;Dylan&quot;</span>);</span><br><span class="line"><span class="built_in">PrintName</span>(firstName);      </span><br><span class="line"><span class="built_in">PrintName</span>(lastName);</span><br><span class="line">std::cout &lt;&lt; s_AllocCount &lt;&lt; <span class="string">&quot; allocations\n&quot;</span>;</span><br><span class="line">std::cin.<span class="built_in">get</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><blockquote><p>Dylan<br>Yan<br>Chernikov<br>0 allocations</p></blockquote><h2 id="【P82】C-的单例模式"><a href="#【P82】C-的单例模式" class="headerlink" title="【P82】C++的单例模式"></a>【P82】C++的单例模式</h2><ol><li><p>Singleton类只允许被实例化一次，用于组织一系列全局的函数或者变量，与namespace很像。例子：生成随机数的类、渲染器类</p></li><li><p><strong>C++中的单例只是一种组织一堆全局变量和静态函数的方法</strong></p></li><li><p>什么时候用单例模式：</p><p>当我们想要<strong>拥有应用于某种全局数据集的功能</strong>，且我们<strong>只是想要重复使用</strong>时，单例是非常有用的</p><blockquote><p>有些单例的例子，比如一个随机数生成器类，我们只希望能够通过它得到一个随机数，我们只想实例化它一次（单例）来生成随机数生成器的种子，并建立起它所需要的所有辅助性工具。另一个例子就是渲染器，渲染器通常是一个全局性的东西，我们通常不会有一个渲染器的多个实例，在现实工作中，我们只有一个渲染器的实例，我们可以向它提出所有的渲染命令，然后它就会为我们渲染</p></blockquote></li><li><p>实现单例的基本方法：</p><p>1）<strong>构造函数私有化</strong>，使得外部无法创建Singleton对象</p><p>2）提供一个静态访问该类的方法</p><blockquote><p>设一个<strong>私有的静态的实例</strong>，<strong>并且在类外将其定义！</strong> 然后用一个静态函数返回其引用or指针，便可正常使用了</p></blockquote><p>3）为了安全，<strong>标记拷贝构造函数为delete</strong>（删除拷贝构造函数）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;random&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Random</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Random</span>(<span class="type">const</span> Random&amp;) = <span class="keyword">delete</span>;       <span class="comment">//删除拷贝复制函数</span></span><br><span class="line">Random&amp; <span class="keyword">operator</span>=(<span class="type">const</span> Random&amp;) = <span class="keyword">delete</span>;       <span class="comment">//关闭赋值运算符</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> Random&amp; <span class="title">getInstance</span><span class="params">()</span> </span>&#123;        <span class="comment">//通过getInstance函数来获取唯一的一个实例</span></span><br><span class="line"><span class="type">static</span> Random Instance;           <span class="comment">//在此处实例化一次</span></span><br><span class="line"><span class="keyword">return</span> Instance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">float</span> <span class="title">Float</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">getInstance</span>().<span class="built_in">IFloat</span>(); &#125;  <span class="comment">//调用内部函数,可用类名调用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">Random</span>() &#123;&#125;                     <span class="comment">//构造函数私有化，使得外部无法创建实例对象</span></span><br><span class="line">std::default_random_engine e;</span><br><span class="line"><span class="type">float</span> m_RandomGenerator = <span class="built_in">e</span>();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">float</span> <span class="title">IFloat</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> m_RandomGenerator; &#125;             <span class="comment">//将函数实现放进private</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Random&amp; r = Random::<span class="built_in">getInstance</span>();</span><br><span class="line"><span class="type">float</span> number = r.<span class="built_in">Float</span>();</span><br><span class="line"><span class="comment">//or float number = Random::Float();</span></span><br><span class="line"></span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;number：&quot;</span> &lt;&lt; number &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="【P83】C-的小字符串优化"><a href="#【P83】C-的小字符串优化" class="headerlink" title="【P83】C++的小字符串优化"></a>【P83】C++的小字符串优化</h2><p>VS开发工具在Release模式下面 （Debug模式都会在堆上分配） ，使用size小于16的string，不会分配内存，而大于等于16的string，则会分配32bytes内存以及更多，所以16个字符是一个分界线 （注：不同编译器可能会有所不同）</p><blockquote><p><code>std::string</code>类型本身只占8字节。<code>std::string</code>内部里的成员变量有一个指向字符串的指针（32位编译模式下占4字节）和一个储存字符串长度的int类型（占4字节），所以创建一个<code>std::string</code>的对象时会在堆上分配8字节内存</p><p>在Debug模式下，创建一个大于等于16的<code>std::string</code>变量（本质上是个对象）时，会先为string变量在堆上分配8字节内存，然后再为字符串在堆上分配内存（大于等于32bytes），然后<code>std::string</code>对象里的指针便会指向该内存地址</p><p>注：指针在32位编译模式下占4字节，在64位编译模式下占8字节</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span> size)</span></span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Allowcated &quot;</span> &lt;&lt; size &lt;&lt; <span class="string">&quot; bytes&quot;</span> &lt;&lt; std::endl;     <span class="comment">//若在堆上分配内存时则会打印此句</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">malloc</span>(size);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">std::string text1 = <span class="string">&quot;0123456789ABCDE&quot;</span>;      <span class="comment">//15个字符</span></span><br><span class="line">std::string text2 = <span class="string">&quot;0123456789ABCDEF&quot;</span>;     <span class="comment">//16个字符</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="【P84】跟踪内存分配的简单方法"><a href="#【P84】跟踪内存分配的简单方法" class="headerlink" title="【P84】跟踪内存分配的简单方法"></a>【P84】跟踪内存分配的简单方法</h2><ol><li><p>重写new和delete操作符函数，并在里面打印分配和释放了多少内存，也可在重载的这两个函数里面设置断点，通过查看调用栈即可知道什么地方分配或者释放了内存</p><blockquote><p>一个class的new是分为三步：operator new（其内部调用malloc）返回void*、static_cast转换为这个对象指针、构造函数。而delete则分为两步：构造函数、operator delete。new和delete都是表达式，是不能重载的，而把他们行为往下分解则是有operator new和operator delete，是有区别的</p><p>直接用的表达式的行为是不能变的，不能重载，即new分解成上图的三步与delete分解成上图的两步是不能重载的。这里内部的operator new和operator delete底层其实是调用的malloc，这些内部的几步则是可以重载的</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;memory&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 写这个函数意思是不用standard library的operator new</span></span><br><span class="line"><span class="comment">// 链接器实际上就会改为链接这个函数</span></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span> size)</span> </span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Allowcated &quot;</span> &lt;&lt; size &lt;&lt; <span class="string">&quot; bytes\n&quot;</span>;     <span class="comment">//若在堆上分配内存则会打印此句</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">malloc</span>(size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="type">void</span>* memory, <span class="type">size_t</span> size)</span> </span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Freeing &quot;</span> &lt;&lt; size &lt;&lt; <span class="string">&quot; bytes\n&quot;</span>;</span><br><span class="line"><span class="built_in">free</span>(memory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Object</span> &#123;</span><br><span class="line"><span class="type">int</span> x, y, z;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#123;</span><br><span class="line">std::unique_ptr&lt;Object&gt; obj = std::<span class="built_in">make_unique</span>&lt;Object&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">std::string text1 = <span class="string">&quot;Dylan&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>还可以写一个简单统计内存分配的类，在每次new时统计分配内存，在每次delete时统计释放内存，可计算出已经分配的总内存：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">AllocationMetrics</span> &#123;</span><br><span class="line"><span class="type">uint32_t</span> TotalAllocated = <span class="number">0</span>;    <span class="comment">//总分配内存</span></span><br><span class="line"><span class="type">uint32_t</span> TotalFreed = <span class="number">0</span>;        <span class="comment">//总释放内存</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">uint32_t</span> <span class="title">CurrentUsage</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> TotalAllocated - TotalFreed; &#125; <span class="comment">//写一个小函数来输出当前在堆上用了多少内存</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> AllocationMetrics s_AllocationMetrics;   <span class="comment">//创建一个全局静态实例</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 写这个函数意思是不用standard library的operator new</span></span><br><span class="line"><span class="comment">// 链接器实际上就会改为链接这个函数</span></span><br><span class="line"><span class="function"><span class="type">void</span>* <span class="keyword">operator</span> <span class="title">new</span><span class="params">(<span class="type">size_t</span> size)</span> </span>&#123;</span><br><span class="line">s_AllocationMetrics.TotalAllocated += size;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">malloc</span>(size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="keyword">operator</span> <span class="title">delete</span><span class="params">(<span class="type">void</span>* memory, <span class="type">size_t</span> size)</span> </span>&#123;</span><br><span class="line">s_AllocationMetrics.TotalFreed += size;</span><br><span class="line"><span class="built_in">free</span>(memory);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Object</span> &#123;</span><br><span class="line"><span class="type">int</span> x, y, z;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用一个函数输出我们的内存使用情况</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">void</span> <span class="title">PrintMemoryUsage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">std::cout &lt;&lt; <span class="string">&quot;Memory Usage: &quot;</span> &lt;&lt; s_AllocationMetrics.<span class="built_in">CurrentUsage</span>() &lt;&lt; <span class="string">&quot; bytes\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">PrintMemoryUsage</span>();</span><br><span class="line">std::string text1 = <span class="string">&quot;Dylan&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">PrintMemoryUsage</span>();</span><br><span class="line">&#123;</span><br><span class="line">std::unique_ptr&lt;Object&gt; obj = std::<span class="built_in">make_unique</span>&lt;Object&gt;();</span><br><span class="line"><span class="built_in">PrintMemoryUsage</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">PrintMemoryUsage</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在硇洲岛捡到寄居蟹</title>
      <link href="/2023/07/23/%E6%B5%B7%E8%9E%BA%E5%A3%B3%E4%B8%AD%E7%9A%84%E5%B1%85%E6%B0%91/"/>
      <url>/2023/07/23/%E6%B5%B7%E8%9E%BA%E5%A3%B3%E4%B8%AD%E7%9A%84%E5%B1%85%E6%B0%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>7.22晚，我跟马骝借了民宿里的头灯便向海边走去。这是我第一次赶海，兴致勃勃的我跟早就到海边抓螃蟹的小孩一起行动，找到了几个螺壳，其中有四个是有寄居蟹的。带回民宿后，我问阿用哥该如何将它们取出来，他说等第二天它们因缺水死后，尾部的钩子勾不住壳，就能慢慢地拉出来了，他还告诉我将它们放淡水里能加速它们的死亡。然后我把它们带到四楼的洗手池里，并在洗手池里放了些自来水。</p><p>将它们放好并清洗完其余的壳后我便回房间里，百度查了一下寄居蟹，想简单地了解一下它们，发现它们是非常脆弱的，在脱水的情况下，只能存活几个小时，最多存活一天，找不到壳裸奔会被太阳晒死，换壳的时候如果失败会死，有的时候寄居蟹们还会在换壳的时候排起长队，大寄居蟹换大壳，换下来的小壳给后面的寄居蟹，它们的一生似乎都在奔波于换壳中，为了活下去而努力着。</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E5%AF%84%E5%B1%85%E8%9F%B9/%E5%AD%98%E6%B4%BB%E4%B8%8B%E6%9D%A5%E7%9A%84%E5%AF%84%E5%B1%85%E8%9F%B9.jpg" alt="存活下来的寄居蟹"></p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E5%AF%84%E5%B1%85%E8%9F%B9/%E5%AF%84%E5%B1%85%E8%9F%B9.jpg"></p><p>第二天早上我起来去看它们的情况，令我惊讶的是四个里居然有一个还活着，不知道它是如何做到的。它还能时不时把身体探出来察看周围情况，可能在寻找一线生机，但也比较虚弱了，我不得不敬佩这个寄居蟹的顽强，所以我决定把它带到海边放生，希望它能活下去吧。<br>生命是脆弱的，但因为活下去的本能可以表现得很顽强。无论怎么样，生命总能找到出路。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 在湛江的日子里 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>茂名三宫山之行</title>
      <link href="/2023/07/14/%E8%8C%82%E5%90%8D%E4%B8%89%E5%AE%AB%E5%B1%B1/"/>
      <url>/2023/07/14/%E8%8C%82%E5%90%8D%E4%B8%89%E5%AE%AB%E5%B1%B1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>7月11日下午，我在教我小学四年级的表妹，再又一次被气得歇斯底里时，突然一条微信信息弹出，打开手机一看，原来是许久未见过面的雷叔邀请我当晚去通宵爬三宫山。我为了逃离教表妹这一折磨的任务，想都没多想当即答应下来。</p><p>吃饭的时候，我用手机查了一下三宫山，发现它是一座未开发的野山，，拥有1250米高的海拔，且山上是没有任何防护措施的。雷叔在车上的时候跟我们说他之前在早上爬过一次，这座山算是比较险的。</p><p>看来又是一次未知的冒险。</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E8%8C%82%E5%90%8D%E4%B8%89%E5%AE%AB%E5%B1%B1/%E4%B8%8E%E9%9B%B7%E5%8F%94%E7%9A%84%E6%B6%88%E6%81%AF%E8%AE%B0%E5%BD%95.jpg" alt="我与雷叔当时的部分消息记录"></p><p>我们在来的路上买了一些饮料和食物，防止在爬山过程中没有足够的能量补充，毕竟第一次通宵爬山，还是准备充分点好。</p><p>大概十一点多的时候才来到山脚下，然后我们就要开车开到山上的一个停车场，由于我们的司机是新手，且通往停车场的山路多是昏暗的崎岖小道，这个过程可谓是惊险十足，可能稍有不慎就跌落山底。</p><p>停车场这里时不时会吹起大风卷起一片沙尘，但这里的视野是比较好的，我们抬头便能看到点点星光。当时来的人并不多，有经验的雷叔给我们找来了之前别人留下给后来人的登山杖，我们待到约莫凌晨十二点多的时候便拿上装备开始爬山。</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E8%8C%82%E5%90%8D%E4%B8%89%E5%AE%AB%E5%B1%B1/%E5%81%9C%E8%BD%A6%E5%9C%BA%E4%B8%8A%E7%A9%BA%E7%9A%84%E6%98%9F%E6%98%9F.jpg" alt="停车场上空的星星"></p><p>在走一段充满乱石的山路时有一段小插曲，裤哥边用手机聊天边走路，被我们吐槽，结果没走多久就掉下一个不是很高的小坑，引得我们哄堂大笑。在这段山路上我们还遇到了2队人，一队有差不多十人左右，且都是跟我们年纪相仿的，还有一队是两位比我们大一轮的茂名大叔，我印象最深刻的就是这两个大叔，他们在爬山的全程中似乎是有用不完的热情。在走到差不多四分之一时（这里之后就没有山路了，要用登山杖爬这些几乎呈45°角的山坡），我们就看到有人在山坡上打灯，然后我们就向灯的方向大呼，并加快爬坡速度。越往上，由于不再有树的遮挡，山风也畅通无阻。</p><p>在爬上山顶的过程，有2段比较强的风带，站在上面人都有点站不稳，没有登山杖的话想通过是比较艰难的。路上我们还陆续遇到了两三拨人，我们一起在一个背风坡上坐下来抱团取暖，而有的人则继续前进，比如那两位很有活力的大叔。</p><p>约莫4点左右，我们才继续上山，大概4点半左右上到山顶。由于太早了，我们只好退到离山顶不远处的坡上休息等待，那里有很多巨石块，能够挡住风，裤哥直接就躺在一个石头下面睡觉，整个人蜷缩成一团。等待日出期间，在我们之后爬山的人也陆陆续续地来到了这里，其中一个路人路过我身边的时候突然提醒了我一下：“你的脚上有蚂蟥”，我直接心里一惊，低头一看，心里大叫道，卧槽好大的蚂蟥。我赶紧把手伸过去想把它取出来，结果因为太紧张把它弄掉进鞋里，我直接懵了，那位好心的路人见状赶紧提醒我：“快把鞋子脱了倒出来，我立马照做，然后他就用他的登山杖把它戳死防止后面上来的人受其祸害，不得不说，这小小蚂蟥还是很厉害的，咬得我在天亮前脚一直出血。</p><p>天亮了，然而多云，众人登山看日出的期望落空了。最初我们有点不甘心，仍不愿离去，山间的云雾不断地从我们身边经过，而老天爷喜欢跟我们开玩笑，时不时让云散开一下给我们一些视野。等了约莫一个小时，裤哥不想再等了便催促我们赶紧下山，但由于云雾太浓视野有限，我们走得小心翼翼。在大概7点十几分的时候，风终于把山间的云雾吹散开，太阳也探出了头，我们也加快了下山的步伐，有了好的视野后我们依旧走走停停，因为我们都被山上看到的风景迷住了，希望能用手机留住此刻的美好。</p><p><img src="https://cdn.jsdelivr.net/gh/DylanYu233/PicGodemo/img/%E8%8C%82%E5%90%8D%E4%B8%89%E5%AE%AB%E5%B1%B1%20(2).jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/DylanYu233/PicGodemo/img/%E8%8C%82%E5%90%8D%E4%B8%89%E5%AE%AB%E5%B1%B1%20(3).jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/DylanYu233/PicGodemo/img/%E8%8C%82%E5%90%8D%E4%B8%89%E5%AE%AB%E5%B1%B1%20(5).jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/DylanYu233/PicGodemo/img/%E8%8C%82%E5%90%8D%E4%B8%89%E5%AE%AB%E5%B1%B1%20(6).jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/DylanYu233/PicGodemo/img/%E8%8C%82%E5%90%8D%E4%B8%89%E5%AE%AB%E5%B1%B1.jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/DylanYu233/PicGodemo/img/%E8%8C%82%E5%90%8D%E4%B8%89%E5%AE%AB%E5%B1%B1%20(13).jpg"></p><p>(未完待续…)</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我眼中的遂溪</title>
      <link href="/2023/07/10/%E6%88%91%E7%9C%BC%E4%B8%AD%E7%9A%84%E9%81%82%E6%BA%AA/"/>
      <url>/2023/07/10/%E6%88%91%E7%9C%BC%E4%B8%AD%E7%9A%84%E9%81%82%E6%BA%AA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>遂溪，我的家乡，醒狮之乡。这座小县城的节奏很慢，存在感也很低，给人的感觉就是非常安静，哪怕是在疫情时期，在这里也彷佛感受不到疫情的严峻，它就静静地在这里，与世无争，很多人走出去，很少人进来，也很少人回来，虽然不是像《桃花源记》中的世外桃源般与世隔绝，但也有几分悠然。</p><p>在很早以前，还没有任何生活压力的我满遂溪跑，只为了和好友找个安全质量又好的网吧上网，那几年下来我没见过遂溪有任何变化，甚至可以说，18年以前的遂溪和我刚出生的时候的遂溪是几乎没什么两样的，比如修路，从我记事起这座县城就在修路，一直修一直烂，无论哪条路都是坑坑洼洼的,可以说是遂溪特有的一道风景线了。我曾经以为遂溪是万年不变的，天天和朋友开玩笑，吐槽遂溪永远发展不起来，就是一个适合养老摆烂的地方。到了高二结束正式进入高三，开启了两点一线的生活后，我便很少游荡了，只有在考完一次大考或者节假日放假，没有晚修的晚上才会选择出来扫个共享电车（最喜欢青桔），漫无目的地乱逛。</p><p><img src="https://cdn.jsdelivr.net/gh/DylanYu233/PicGodemo/img/%E9%81%82%E6%BA%AA%20(12).jpg" alt="高三上学期的某天晚上，对面的那栋楼是当时学校还在建的教学楼，如今已投入使用"></p><p>不知道是不是因为长期两点一线的生活让我的弦一直绷得很紧，在学校里没有心思去想一些有的没的，以至于我每次出去乱逛，我的思绪就会像脱缰的野马一般奔腾起来，感知也变得敏锐起来。在逛的过程中，我能感觉到遂溪的很多地方似乎跟我记忆中的遂溪不一样了，少了很多东西，但也多了一些东西，但当时并没有过多留意。</p><p><img src="https://cdn.jsdelivr.net/gh/DylanYu233/PicGodemo/img/%E9%81%82%E6%BA%AA%20(8).jpg" alt="高三的某个傍晚"></p><p><img src="https://cdn.jsdelivr.net/gh/DylanYu233/PicGodemo/img/%E9%81%82%E6%BA%AA%20(9).jpg"></p><p><img src="https://cdn.jsdelivr.net/gh/DylanYu233/PicGodemo/img/%E9%81%82%E6%BA%AA%20(11).jpg" alt="又要威又要戴头盔的国肥"></p><p>上了大学后，我开始留意和关注遂溪的变化,每次回来就像是见一个久久未见的故人一般。我感觉2018年似乎是遂溪的一个时间节点，在那之后比如儿时最喜欢去的百姓超市，有着两三代人回忆的茶楼酒家皇家、银塔等酒店由于疫情都倒闭了，如今这些建筑还在，就像时代的残影一般，彷佛在提醒着我曾经的时光一去不复返了，但也有许多东西出现并代替了它们的位置，遂溪在那之后有了全丰这样的商业广场，也出现了新的茶楼酒家代替了皇家、银塔的位置，还有了孔圣山，不仅如此许许多多的房地产也进驻遂溪，在今年还开通了便于遂溪和湛江之间往返的遂溪大道。</p><p><img src="https://cdn.jsdelivr.net/gh/DylanYu233/PicGodemo/img/%E9%81%82%E6%BA%AA%20(6).jpg" alt="曾经的二中"></p><p><img src="https://cdn.jsdelivr.net/gh/DylanYu233/PicGodemo/img/%E9%81%82%E6%BA%AA%20(5).jpg" alt="当时还未开通的遂溪大道"></p><p><img src="https://cdn.jsdelivr.net/gh/DylanYu233/PicGodemo/img/%E9%81%82%E6%BA%AA%20(3).jpg" alt="孔圣山一角"></p><p>前两天和好友兜风的时候，路过旧中心市场遗址，那里原先的建筑已经被推掉了，不仅如此还用施工时才用的蓝色铁皮板围了起来，不知道将来会建出什么，但样例图里呈现出来的样子看起来似乎挺不错的，这里暂且留个悬念吧。兜风的时候我还注意到，一直受遂溪本地佬诟病的道路也终于修成了沥青路（上次回来很多地方还在疯狂修路，这个暑假回来我就发现了很多地方都铺成了沥青路），诸如此类的变化还在继续着。每次回来，看到家乡这些变化的时候就像拆礼物时一样，总是有新的东西，也总会有所期待。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
            <tag> 在湛江的日子里 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Hexo搭建博客</title>
      <link href="/2023/05/30/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2023/05/30/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="常用工具推荐"><a href="#常用工具推荐" class="headerlink" title="常用工具推荐"></a>常用工具推荐</h3><p>markdown编辑器：Typora</p><p>代码编辑器：notepad++、VScode等</p><h3 id="Git下载安装及环境配置"><a href="#Git下载安装及环境配置" class="headerlink" title="Git下载安装及环境配置"></a>Git下载安装及环境配置</h3><p>进入Git官网下载页面(<a href="https://git-scm.com/download/">https://git-scm.com/download/</a>) 下载最新版的Git项目版本管理工具Windows64位版本安装程序，我下载的版本是 <code>Git-2.41.0-64-bit.exe</code></p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/1.png"></p><p>下载完后双击安装包开始安装，安装设置用默认的就好，一直选Next，最后点Install开始安装。接下来让我们测试一下是否安装成功，首先通过快捷键win+R打开Windows运行命令框，然后输入cmd打开命令行程序，在黑框中输入命令git version或git -v后回车</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/2.jpg"></p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/3.jpg" alt="回车后如图显示就证明安装成功了"></p><h3 id="Node-js下载安装及环境配置"><a href="#Node-js下载安装及环境配置" class="headerlink" title="Node.js下载安装及环境配置"></a>Node.js下载安装及环境配置</h3><p>进入Node.js官网下载页面(<a href="https://nodejs.org/en">Node.js (nodejs.org)</a>) ,下载完成后，双击安装包，开始安装Node.js.安装设置还是用默认的，一直选Next，最后点Install开始安装。安装完后打开cmd窗口测试是否安装成功</p><p> 输入:  node -v   &#x2F;&#x2F; 显示node.js版本</p><p>​npm -v   &#x2F;&#x2F; 显示npm版本</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/4.jpg"></p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/5.jpg"></p><h3 id="Hexo的下载以及博客的生成"><a href="#Hexo的下载以及博客的生成" class="headerlink" title="Hexo的下载以及博客的生成"></a>Hexo的下载以及博客的生成</h3><p>然后在cmd窗口下输入命令下载hexo</p><p> npm install hexo-cli -g</p><p>安装完后输入命令hexo -v来测试是否安装成功</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/6.jpg"></p><p>然后可以通过输入命令mkdir blog创建名为blog的文件（文件名可自定义，此处以blog为例）</p><p>以我的文档创建为例，此时文件会创建在目录C:\Users\86189下（users即是用户），后面所有博客的东西都会放进这里面来</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/7.jpg"></p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/8.jpg"></p><p>然后在cmd窗口中输入命令 cd blog，然后回车，此时我们就位于名为blog的文件目录下</p><p>输入命令 hexo init，然后回车，就可以在这个blog文件下生成博客的基本框架</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/9.jpg" alt="生成成功后可以在cmd窗口中可看到该提示"></p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/10.jpg" alt="生成成功后可以在blog文件目录下看到这些文件"></p><p>输入命令hexo s 在本地启动博客</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/11.jpg"></p><p>然后复制 <a href="http://localhost:4000/">http://localhost:4000/</a> 去浏览器进行预览</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/12.jpg" alt="这个便是博客初始页面"></p><h3 id="将博客部署到GitHub"><a href="#将博客部署到GitHub" class="headerlink" title="将博客部署到GitHub"></a>将博客部署到GitHub</h3><h4 id=""><a href="#" class="headerlink" title=""></a></h4><p>注册一个github账户，注册成功后，点击右上角的+按钮，选择New repository，创建一个&lt;用户名&gt;.github.io的仓库</p><p>仓库的格式必须为：&lt;用户名&gt;.github.io</p><p>Description：描述仓库（选填）</p><p>勾选 Initialize this repository with a README 初始化一个 README.md 文件</p><p>点击 Create repository 进行创建</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/13.jpg"></p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/14.jpg"></p><p>输入命令在blog文件目录下安装一个git部署插件</p><p>npm install –save hexo-deployer-git</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/15.jpg"></p><h4 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h4><p>点击电脑右下角，然后找到Git，打开Git Bash配置用户名和邮箱</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/16.jpg"></p><p>然后在git bash命令窗口分别输入</p><p>git config –global user.name “你的用户名”</p><p>git config –global user.email “你的邮箱”</p><p>可通过命令git config -l检查是否配置成功</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/17.jpg"></p><h4 id="连接GitHub"><a href="#连接GitHub" class="headerlink" title="连接GitHub"></a>连接GitHub</h4><p>生成ssh公钥，执行以下指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;你的邮箱&quot;</span></span><br></pre></td></tr></table></figure><p>然后一直回车直到出现下图所示</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/18.jpg" alt="结果如图"></p><p>之后打开C盘下用户文件夹下的.ssh的文件夹，会看到 id_rsa.pub</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/19.jpg"></p><p>然后用记事本打开公钥的内容（也就是文件id_rsa.pub）并全部复制</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/20.jpg"></p><h4 id="将SSH-KEY配置到Github"><a href="#将SSH-KEY配置到Github" class="headerlink" title="将SSH KEY配置到Github"></a>将SSH KEY配置到Github</h4><p>进入github，点击右上角头像，选择settings</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/21.jpg"></p><p>进入设置页面后选择SSH and GPG keys</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/22.jpg" alt="选择New SSH key"></p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/23.png"></p><h4 id="测试连接，输入以下命令"><a href="#测试连接，输入以下命令" class="headerlink" title="测试连接，输入以下命令"></a>测试连接，输入以下命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/24.jpg" alt="出现红框内容便说明大功告成"></p><h4 id="修改-config-yml文件"><a href="#修改-config-yml文件" class="headerlink" title="修改_config.yml文件"></a>修改_config.yml文件</h4><p>先到GitHub仓库中复制SSH</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/25.jpg"></p><p>然后在代码编辑器中打开blog文件夹，在_config.yml中如图修改设置，设置成功后记得保存</p><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/26.jpg" alt="_config.yml的初始代码"></p><p>修改deploy设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">&#x27;git&#x27;</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:username/username.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><p><img src="/%E5%8D%9A%E6%96%87%E5%9B%BE/%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/27.jpg" alt="修改后"></p><p>_config.yml就是整个Hexo框架的配置文件了。可以在里面修改大部分的配置。详细可参考官方的配置描述</p><p>最后在cmd窗口的blog文件位置下输入命令hexo d，将博客上传到github仓库</p><p>hexo常用命令如下：</p><p>hexo clean  &#x2F;&#x2F;清除缓存</p><p>hexo g         &#x2F;&#x2F;生成静态文件</p><p>hexo d        &#x2F;&#x2F;部署网站</p><p>hexo s        &#x2F;&#x2F;启动服务器</p><p>上传成功后，便可在浏览器中输入 username.github.io访问自己的博客</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>我使用的博客主题是Butterfly，该主题算是比较热门的，推荐使用。此处附上主题的使用教程网址：<a href="https://butterfly.js.org/">https://butterfly.js.org/</a></p><p>关于博客主题的设置可参考视频教程：</p><p>【使用Hexo搭建个人博客手摸手教学(7)|主题安装使用】 <a href="https://www.bilibili.com/video/BV1d64y1q7KS/?share_source=copy_web&vd_source=4175708e3d0d482d0df075930a6bbbdf">https://www.bilibili.com/video/BV1d64y1q7KS/?share_source=copy_web&amp;vd_source=4175708e3d0d482d0df075930a6bbbdf</a></p><p>有疑问或者想互相交流可添加QQ联系本人：1135337589</p>]]></content>
      
      
      
        <tags>
            
            <tag> Blog </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
